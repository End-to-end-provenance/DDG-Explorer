% \VignetteIndexEntry{UsingRDataTracker} 

% This file was converted to LaTeX by Writer2LaTeX ver. 1.2
% see http://writer2latex.sourceforge.net for more info

% Conversion and modifications by Luis Perez 3-Aug-2014
% Revisions by Emery Boose and Barbara Lerner

\documentclass[12pt]{article}
\usepackage{xcolor}
\usepackage{hyperref}
\usepackage{graphicx}
\hypersetup{colorlinks=true, linkcolor=blue, citecolor=blue, filecolor=blue, urlcolor=blue, pdftitle=}

% Set up the margins
\usepackage[margin=1in]{geometry}

% Using packages to display R Code
\usepackage{listings}

% Setting up the title
\title{Using RDataTracker}

\author{
	Emery R. Boose\\
	Harvard Forest\\
	Harvard University\\
	324 North Main St, Petersham, MA 01366\\
	boose@fas.harvard.edu\\
	\and
	Barbara S. Lerner\\
	Department of Computer Science\\
	Mount Holyoke College\\
	50 College St, South Hadley, MA 01075\\
	blerner@mtholyoke.edu\\
	\and
	Luis Antonio Perez, Harvard College\\
}

\date{\today\\Version 2}

% Pagestyle
\setlength{\headheight}{15pt}
\setlength{\parindent}{0cm}
\usepackage{fancyhdr}
\pagestyle{fancy}

% Page header
\fancyhead[R]{Using RDataTracker}

% Page footer
\pagenumbering{arabic}

% R Code
\lstset{
language=R,
basicstyle=\scriptsize\ttfamily,
commentstyle=\ttfamily\color{gray},
numbers=left,
numberstyle=\ttfamily\color{gray},
stepnumber=1,
numbersep=5pt,
backgroundcolor=\color{white},
showspaces=false,
showstringspaces=false,
showtabs=false,
frame=single,
tabsize=2,
captionpos=b,
breaklines=true,
breakatwhitespace=false,
title=\lstname,
escapeinside={(*@}{@*)},
keywordstyle={},
morekeywords={},
mathescape
}

% To insert LaTex formatting in code listing:
% (*@\textcolor{blue}{ddgdir <- paste(getwd(), "/ddg", sep="")}@*)

\begin{document}

\maketitle

\newpage

\tableofcontents

\bigskip
\bigskip

\listoffigures

\newpage

\section{What is RDataTracker?}

\textit{Data provenance} is the information required to accurately document the history of an item of data, including how it was created and how it was transformed.

\bigskip

RDataTracker is a library of R functions that collects data provenance in the form of a \textit{Data Derivation Graph} (DDG) when executing an R script or working in the R console. The DDG is saved as a text file (\textbf{ddg.txt}) in a special DDG directory, where it can be viewed, stored, and queried using a separate tool, DDG Explorer.

\section{What is a DDG?}

A Data Derivation Graph (DDG) captures the history of a data analysis by recording the steps or operations that were performed and the items of data that were created or transformed. Technically it takes the form of a mathematical graph consisting of nodes and edges, where the nodes represent operations (procedural nodes) or items of data (data nodes), and the edges represent how control passes from procedural node to procedural node (control flow) or how data passes between procedural nodes and data nodes (data flow).

\bigskip

In DDG Explorer, nodes are shown as ovals and edges are shown as arrows (see below for examples). Different colors (explained in the legend for DDG Explorer) are used to indicate different types of nodes and edges.

\bigskip

Procedural nodes include Simple Operation, Parameter Binding, Collapsible, Expandable, Checkpoint, and Restore nodes. Simple Operation nodes represent a single R command (often an assignment statement). Parameter Binding nodes indicate how actual parameters are bound to formal parameters in user-defined R functions. Collapsible and Expandable nodes provide a level of abstraction by allowing a section of the DDG to be expanded or collapsed. Checkpoint nodes indicate creation of a checkpoint. Restore nodes indicate that a previous checkpoint was restored.

\bigskip

Data nodes include Data, File, URL, and Error nodes. Data nodes may represent simple values (numbers, strings, etc) or complex values (vectors, arrays, data frames, graphics, etc). File nodes are used for files that are inputs to the R script or created by the R script. URL nodes are used for URL addresses. Error nodes are used for error messages. The values of URL, Error, and simple Data nodes are stored in the DDG text file. The values of File and complex Data nodes are stored as files in the DDG directory.


\bigskip

Note that the DDG always records a \textit{particular} execution. A new DDG is created every time an R script is run or a new console session is completed.

\bigskip

For more details on DDGs and how to view, store, and query them, please see \textit{Using DDG Explorer}.

\section{Installing RDataTracker}

The following instructions assume you are using RStudio. 

\bigskip

RDataTracker is distributed as an R package. Note that R packages must be \textit{installed} to your computer (normally just once) and then \textit{loaded} for use in a particular session.

\bigskip

To install RDataTracker, copy or download the package file to your computer, open RStudio, and use the Tools / Install Packages option to install from a Package Archive File (alternatively you can use the \textbf{install.packages} command at the R prompt). The library depends on \textbf{gtools}, so make sure this package is installed before attempting installation of RDataTracker. Once the library has been installed, select Packages / RDataTracker to see a list of help pages for the various functions. Note that all functions begin with \textbf{ddg.} to avoid confusion with function names in the main script or other libraries.

\bigskip

To load RDataTracker, use the \textbf{library} command at the R prompt or at the top of your script. Alternatively you can click on the checkbox for RDataTracker in the list of packages in RStudio.

\bigskip

Because they may alter the user's environment, the checkpoint and restore features are implemented in a separate R script (DDGCheckpoint.R) that must be downloaded separately and loaded using the R \textbf{source} function.

\section{Using RDataTracker}

\subsection{A Simple Example}
\label{sec:started}

The following simple example will allow you to create and view a DDG and make sure that the software is installed and working correctly on your computer. Start by entering and saving the following R script:

\bigskip

\begin{lstlisting}
# R SCRIPT

f <- function(x) {
  x <- x^2
  return(x)
}

a <- 10
b <- f(a)
\end{lstlisting}

Enter the following commands in the R console to run the script and collect data provenance. Substitute your working directory and script name; if your script does not reside on the working directory, supply the full path and name of the script in \textbf{ddg.run}.

\bigskip

\begin{lstlisting}
# R CONSOLE

> library(RDataTracker)
> setwd("c:/data/r/test")
> ddg.run("test.r")
\end{lstlisting}

Here line 3 loads the RDataTracker package, line 4 sets the working directory, and line 5 executes the script using the \textbf{ddg.run} function. Note that the library needs to be loaded only once in a given R session and the working directory may not need to be set if the current working directory is correct. When execution is completed, you should see the following lines (or similar lines) in the R console:

\bigskip

\begin{lstlisting}
# R CONSOLE

##------ Mon Sep 28 10:53:36 2015 ------##
##------ Mon Sep 28 10:53:36 2015 ------##
[1] "Saving DDG in  c:/data/r/test/ddg/ddg.txt"
[1] "Saving DDG in  c:/data/r/test/ddg/ddg.txt"
\end{lstlisting}

The DDG consists of a text file called \textbf{ddg.txt} plus some associated files. By default these are stored on a subdirectory called \textbf{ddg} of the working directory. This directory is created if it does not already exist and is overwritten by new DDG files if the script is run again.

\bigskip

To view and query the DDG, start DDG Explorer and select \textit{Open From File} to open the file \textbf{ddg.txt}. When fully expanded, the DDG should resemble the DDG shown in Figure \ref{fig:SimpleExample}. Note that it is possible to expand or collapse portions of the DDG by clicking on light-blue or green nodes, respectively. The value of a particular data node may be viewed by right clicking on the node. Please see \textit{Using DDG Explorer} for more details on how to use DDG Explorer.

\begin{figure}
	\begin{center}
		\includegraphics[width=16.0cm, keepaspectratio=true]{UsingRDataTracker-img/SimpleExample.png}
		\caption{A Simple Example}
		\label{fig:SimpleExample}
	\end{center}
\end{figure}

\bigskip

Note that many RDataTracker functions accept either names or values as arguments. So the same script might be executed as follows:

\bigskip

\begin{lstlisting}
# R CONSOLE

> library(RDataTracker)
> setwd("c:/data/r/test")
> r.script <- "test.r"
> ddg.run(r.script)
\end{lstlisting}

\subsection{Using ddg.run}
\label{sec:ddg.run}

The \textbf{ddg.run} function provides the easiest way to collect data provenance from an executing R script. \textbf{ddg.run} initializes the DDG, sources the script, and saves the DDG after execution is completed. Data provenance is automatically collected at a fine scale without the need to annotate the script manually (Figure \ref{fig:SimpleExample}).

\bigskip

The \textbf{ddg.run} function collects the following information by default: Each top-level assignment statement is represented by a simple Operation node (or a pair of collapsible Start / Finish nodes), together with a Data node for the value assigned and Data node(s) for input and intermediate values (if any).  Each call to a user-defined function is represented by Simple Operation nodes for the function and the function return and collapsible Start and Finish nodes for the function call. Data nodes are created for the function itself and for the formal parameters (if any), Parameter Binding nodes are created to show the bindings of formal to actual parameters (if any), and a Data node is created for the return value of the function. Collection of data provenance for assignment statements within functions is planned for a future version of RDataTracker.

\bigskip

The operation of \textbf{ddg.run} may be altered by changing the values of its input parameters. Some examples are given below. For more details, please see the help message for \textbf{ddg.run}.

\bigskip

\textit{Function annotation}. The collection of detailed provenance for functions may be turned off by setting the parameter \textbf{annotate.functions} to FALSE:

\bigskip

\begin{lstlisting}
# R CONSOLE

> ddg.run("test.r", annotate.functions=FALSE)
\end{lstlisting}

This results in a more compact DDG with minimal provenance for functions (Figure \ref{fig:NoFunctionAnnotation}).

\bigskip

\begin{figure}
	\begin{center}
		\includegraphics[width=16.0cm, keepaspectratio=true]{UsingRDataTracker-img/NoFunctionAnnotation.png}
		\caption{Minimal Function Annotation}
		\label{fig:NoFunctionAnnotation}
	\end{center}
\end{figure}

Alternatively, the functions \textbf{ddg.annotate.on} or \textbf{ddg.annotate.off} may be used at the top of the script to provide a list of functions to annotate or not to annotate, respectively. For example, including the following statement at the top of the script would result in detailed annotation of the functions \textbf{f} and \textbf{g} only:

\bigskip

\begin{lstlisting}
# R CONSOLE

ddg.annotate.on("f", "g")
\end{lstlisting}

\textit{Console mode}. The collection of provenance for top-level assignment statements (console mode) may be turned off by setting the parameter \textbf{enable-console} to FALSE:

\bigskip

\begin{lstlisting}
# R CONSOLE

> ddg.run("test.r", enable.console=FALSE)
\end{lstlisting}

Note that console mode may also be turned on and off by using the functions \textbf{ddg.console.on} and \textbf{ddg.console.off} in the script itself. So these functions, plus the initial setting of \textbf{enable.console}, may be used to annotate selected portions of a long script.

\bigskip

\textit{DDG directory}. By default the DDG is saved to a subdirectory called \textbf{ddg} of the working directory . A different location may be specified using the \textbf{ddgdir} parameter:

\bigskip

\begin{lstlisting}
# R CONSOLE

ddg.run("test.r", ddgdir="c:/data/r/test/ddg1")
\end{lstlisting}

\textit{Maximum file size}. By default RDataTracker stores complex data values (vectors, arrays, data frames, lists, graphics, etc) as separate files (snapshots) in the DDG directory. If storage space or computational speed is a concern, the parameter \textbf{max.snapshot.size} may be used to limit the size of such snapshot files. Use a positive integer value to set the maximum file size in kilobytes:

\bigskip

\begin{lstlisting}
# R CONSOLE

ddg.run("test.r", max.snapshot.size=1000)
\end{lstlisting}

To suppress the creation of snapshot files, set the value of \textbf{max.snapshot.size} to zero:

\bigskip

\begin{lstlisting}
# R CONSOLE

ddg.run("test.r", max.snapshot.size=0)
\end{lstlisting}

Here data nodes will be created for complex data objects but the actual values will not be saved in the DDG. This option may be useful if you wish to create a DDG as rapidly as possible.

\subsection{Abstraction Levels}
\label{sec:abstraction}

RDataTracker and DDG Explorer support hierarchically-nested pairs of Start and Finish nodes that may be expanded or collapsed to reveal or hide portions of the DDG. This feature is particularly helpful for exploring and interpreting large DDGs.

\bigskip

Examples of Start and Finish node pairs that are created automatically by RDataTracker may be seen in Figures \ref{fig:SimpleExample} and \ref{fig:NoFunctionAnnotation}, where they are used for function calls and for the script as a whole.

\bigskip

Users may also add \textbf{ddg.start} and \textbf{ddg.finish} manually to their scripts to mark logical sections and to make larger DDGs easier to view and understand. Note that these functions must be correctly nested with matching arguments:

\bigskip

\begin{lstlisting}
# R SCRIPT

ddg.start("create.data.frame")

x <- c(1, 2, 3)
y <- c(4, 5, 6)
z <- data.frame(x, y)

ddg.finish("create.data.frame")
\end{lstlisting}

When this script is executed with \textbf{ddg.run}, data nodes are created for vectors \textbf{x} and \textbf{y} and data frame \textbf{z}. These data nodes are enclosed within collapsible Start and Finish nodes (\textbf{create.data.frame}) created by the user, and these in turn are enclosed within Start and Finish nodes for the script itself (\textbf{test.r}) created automatically by RDataTracker. When the DDG is first opened in DDG Explorer, the section of the DDG enclosed by the user Start and Finish nodes is collapsed into a single node. (Figure \ref{fig:CollapsedSection}). When this node is clicked on, the hidden section is expanded to reveal the intervening nodes (Figure \ref{fig:ExpandedSection})

\begin{figure}
	\begin{center}
		\includegraphics[width=16.0cm, keepaspectratio=true]{UsingRDataTracker-img/CollapsedSection.png}
		\caption{Collapsed Start and Finish Nodes}
		\label{fig:CollapsedSection}
	\end{center}
\end{figure}

\begin{figure}
	\begin{center}
		\includegraphics[width=16.0cm, keepaspectratio=true]{UsingRDataTracker-img/ExpandedSection.png}
		\caption{Expanded Start and Finish Nodes}
		\label{fig:ExpandedSection}
	\end{center}
\end{figure}

\subsection{Troubleshooting Scripts}
\label{sec:troubleshoot}

The DDG can be a useful tool for troubleshooting scripts during script development. By providing an audit trail of what actually happened during execution, the DDG can help the developer to better understand what a script is doing. The DDG also captures and stores error messages from the R interpreter when the script is run with \textbf{ddg.run}. Such messages, which are displayed in the R console but may be missed during execution of a long script, can be located in the DDG using the search feature of DDG Explorer and interpreted in light of the specific events that preceded them.

\bigskip

In the following simple example the variable \textbf{y} is undefined; however \textbf{y} may or may not be evaluated depending on the conditional statement in line 5:

\bigskip

\begin{lstlisting}
# R SCRIPT

x <- sample(1:10, 1)

if (x >= 5) x <- x + y else x <- 2*x
\end{lstlisting}

This script has an even chance of executing successfully. If the value of \textbf{x} is 5 or greater, the R interpreter returns the following error message to the console when the script is executed with \textbf{ddg.run}:

\bigskip

\begin{lstlisting}
# R CONSOLE

Error in eval(expr, envir, enclos) : object 'y' not found
\end{lstlisting}

In this case the error message is stored in an error node in the DDG, where it may be retrieved by right-clicking on the node (Figure \ref{fig:ErrorMessage}). The position of the error node in the DDG indicates that the error occurred after the successful execution of line 3.

\begin{figure}
	\begin{center}
		\includegraphics[width=16.0cm, keepaspectratio=true]{UsingRDataTracker-img/ErrorMessage.png}
		\caption{Error Messages}
		\label{fig:ErrorMessage}
	\end{center}
\end{figure}

\subsection{Console Sessions}
\label{sec:console}

RDataTracker can also be used to collect data provenance during R console sessions, in which commands are entered at the R console or selected and run from the R editor. Consider the following session:

\bigskip

\begin{lstlisting}
# R CONSOLE

> library(RDataTracker)
> setwd("c:/data/r/test")
> ddg.init()

> x <- 3
> y <- 7
> z <- x + y

> ddg.save()
\end{lstlisting}

\begin{figure}
	\begin{center}
		\includegraphics[width=16.0cm, keepaspectratio=true]{UsingRDataTracker-img/ConsoleSession.png}
		\caption{Console Sessions}
		\label{fig:ConsoleSession}
	\end{center}
\end{figure}

Here line 3 loads the RDataTracker package, line 4 sets the working directory, line 5 initializes the DDG, lines 7-9 are user commands entered at the console, and line 11 saves the DDG to file. Note that line 3 is not required if RDataTracker is already loaded and line 4 is not required if the working directory is already set correctly.

\bigskip

Because no DDG directory is specified in \textbf{ddg.init}, the DDG is saved by default to a directory called \textbf{ddg} in the working directory. In the DDG (Figure \ref{fig:ConsoleSession}), the user's commands are enclosed within Start and Finish Console nodes, which can be expanded or collapsed in DDG Explorer. If the user entered more commands followed by another \textbf{ddg.save}, the DDG would be expanded to include the new commands enclosed within a second set of Console nodes. To quit and clear the DDG from memory, the user could enter \textbf{ddg.save(quit=TRUE)} Note that calling \textbf{ddg.init} again would start a new DDG, overwriting the current DDG if the same DDG directory were used.

\bigskip

In console sessions, as in \textbf{ddg.run}, console mode is enabled by default and RDataTracker creates procedural nodes for each top-level assignment statement along with the corresponding data nodes. This feature can be turned on and off by using the functions \textbf{ddg.console.on} and \textbf{ddg.console.off}. More details can be captured by adding calls to other RDataTracker functions as described below.

\bigskip

There are two limitations to collecting data provenance in console sessions. First, the DDG is built from the R history file, which on most system is limited to 512 lines. For long R console sessions, the \textbf{ddg.save} function must be called every 500 lines or so to avoid loss of provenance information. Second, RDataTracker can only evaluate variables when calls are made to library functions. If the value of a variable is changed and you would like to record the earlier value, call \textbf{ddg.save} before the value is changed.

\section{Advanced Features}

\subsection{Detailed Annotations}
\label{sec:details}

We expect that running R scripts with \textbf{ddg.run} will be the preferred method for collecting data provenance for most users and in most cases. However RDataTracker includes other functions that offer additional flexibility and control in deciding what data provenance to capture in the DDG. Some of these functions are listed below. For more details and a complete list of functions, please see the help pages for RDataTracker.

\begin{enumerate}

\item To collect detailed provenance for a user-defined function, add \textbf{ddg.function} to the beginning of the function body. Input data nodes (if any) are assumed to exist when this function is called. The function name and input parameters are looked up in the calling environment and a binding node is created for each pair of formal and actual parameters. The \textbf{outs} parameters may be used with lists of values to create output data nodes for global variables assigned in the function. To create a data node for the function return value, wrap the argument of each \textbf{return} statement with the \textbf{ddg.return.value} function. If there is no \textbf{return} statement, wrap the final statement with \textbf{ddg.return.value}. Note that \textbf{ddg.function} and \textbf{ddg.return.value} are added automatically in \textbf{ddg.run} unless \textbf{annotate.functions} is set to FALSE.

\item To create a procedural node for a procedure not implemented as a user-defined function, use \textbf{ddg.procedure}. Input data nodes (if any) are assumed to exist when this function is called. The procedure name must be supplied. The \textbf{ins} parameter may be used with a list of values to create input data flow edges. The \textbf{outs} parameters may be used with lists of values to create output data nodes and corresponding data flow edges.

\bigskip

The separate function \textbf{ddg.data.in} may be used in place of \textbf{ins}; while the separate functions \textbf{ddg.data.out}, \textbf{ddg.file.out}, \textbf{ddg.url.out}, \textbf{ddg.exception.out}, and \textbf{ddg.graphic.out}, depending on the data type, may be used in place of \textbf{outs}. Note that, unlike \textbf{ddg.data.in} and \textbf{ddg.data.out}, the \textbf{ins} and \textbf{outs} parameters require quoted strings unless the name is the name of a file.

\item To create an input data node not created by a procedural node, use \textbf{ddg.data}, \textbf{ddg.file}, \textbf{ddg.url}, or \textbf{ddg.exception}, depending on the data type. If only the variable name is supplied, RDataTracker will look up its value in the current environment. Note that these functions are generally not required for top-level statements if console mode is enabled.

\item To evaluate a statement and create associated nodes and edges, use \textbf{ddg.eval}. If the statement is an assignment, a procedural node for the assignment, a data node for the variable assigned, and the corresponding data flow edge are created. Note that this function is not required for top-level statements in \textbf{ddg.run} or in console mode unless \textbf{enable.console} is set to FALSE.

\item To turn automatic capture of data provenance on and off in console mode or in \textbf{ddg.run}, use \textbf{ddg.console.on} and \textbf{ddg.console.off}. Commands captured while console mode is enabled are enclosed in start and finish Console nodes. Note that console mode is enabled by default in \textbf{ddg.run} and \textbf{ddg.init}.

\item To insert the DDG from a sourced script into the larger DDG of the main script, use \textbf{ddg.source} in place of \textbf{source}. The DDG from the sourced script is encompassed within start and finish nodes named after the sourced script.

\item To initiate a DDG, use \textbf{ddg.init}. To save a DDG, use \textbf{ddg.save}. The parameter \textbf{max.snapshot.size} in \textbf{ddg.init} may be used to limit the size of snapshot files in order to improve performance or to save file space. Note that \textbf{ddg.save} may be called multiple times in the same console session or script, while \textbf{ddg.init} creates a new DDG each time it is called. Both functions are called by \textbf{ddg.run}.

\item To turn debugging on and off, use \textbf{ddg.debug.on} and \textbf{ddg.debug.off} at the R console or in an R script. Debugging is off by default. When debugging is turned on, details related to creation of the DDG are displayed in the console as the script executes. This feature may be useful for tracking down annotation errors.

\item To delete the contents of the current DDG directory (if different from the working directory), use \textbf{ddg.flush.ddg} at the R console.

\end{enumerate}

\subsection{Checkpoint and Restore}
\label{sec:checkpoint}

A separate R script called \textbf{DDGCheckpoint.R} contains functions that may be used to save and restore the R state and file system state, allowing a user to return to the environment and data files present at an earlier point in the data analysis. \textbf{ddg.checkpoint} creates a procedural node for the checkpoint operation, a snapshot node for the checkpoint file, and the corresponding data flow edge, and returns the full path to this file. \textbf{ddg.restore} creates a procedural node for the restore operation with a data flow edge from the snapshot node for the saved checkpoint file. A given checkpoint can be restored more than once.

\bigskip

\begin{lstlisting}
# R SCRIPT

source("c:/data/r/test/DDGCheckpoint.R")
a <- 10
checkpoint1 <- ddg.checkpoint()

a <- 20
ddg.restore(checkpoint1)
b <- a
\end{lstlisting}

\begin{figure}
	\begin{center}
		\includegraphics[width=16.0cm, keepaspectratio=true]{UsingRDataTracker-img/CheckpointRestore.png}
		\caption{Checkpoint and Restore}
		\label{fig:CheckpointRestore}
	\end{center}
\end{figure}

Here a checkpoint called \textbf{checkpoint1} is created in line 5 and restored in line 8. In line 9, after the restore, \textbf{b} is assigned the original value of \textbf{a} (10). The checkpoint information is stored in and retrieved from the file \textbf{0.RData} (Figure \ref{fig:CheckpointRestore}).

\bigskip

Note that the DDGCheckpoint.R file is not included in RDataTracker and must be separately sourced.

\subsection{S4 Classes}
\label{sec:classes}

To save S4 objects in snapshot files, create a method implementing the as.character generic for the class. For example, if the object is defined as:

\bigskip

\begin{lstlisting}
# R SCRIPT

setClass("SampleObj",
    slots = c(
        sampleCode = "integer", 
        nIndividuals = "integer", 
        areaCode = "integer"))
\end{lstlisting}    

The as.character method might be defined as:

\bigskip

\begin{lstlisting}
# R SCRIPT

as.character.SampleObj <- function(x) {
    str <- paste("sampleCode =", x@sampleCode, "\n")
    str <- paste(str, "nIndividuals =", x@nIndividuals, "\n")
    str <- paste(str, "areaCode =", x@areaCode, "\n")
    return(str)
}
\end{lstlisting}    

To limit the size of snapshots (i.e. to set \textbf{max.snapshot.size} to a value other than 0 or -1 in \textbf{ddg.run} or \textbf{ddg.init}), define a method for the head generic:

\bigskip

\begin{lstlisting}
# R SCRIPT

head.SampleObj <- function(x) {...}
\end{lstlisting}    

\section{Technical Details}

\subsection{How RDataTracker Works}

RDataTracker collects data provenance and stores it in memory while a script is executing or during a console session. This information is written to the DDG file (\textbf{ddg.txt}) in the DDG directory whenever the function \textbf{ddg.save} is called. The DDG file contains information about the computing environment, the number of procedural steps, and the specifications for individual nodes and edges of the DDG. Procedural nodes and data nodes are each numbered in sequence beginning with one. Simple data values (e.g. numbers and strings) are stored in the DDG file. More complex data values (e.g. vectors, arrays, data frames, and graphics) are stored as pointers to files created in the DDG directory. Input and output files of the main script are stored as pointers to copies of those files created in the DDG directory. While the DDG file can be viewed using a text editor, its primary purpose is to support exchange of information and it should normally be viewed and queried using DDG Explorer.

\bigskip

RDataTracker maintains internal tables of data nodes, procedural nodes, and function return values as a script executes or a console session proceeds.  These tables are used to look up nodes when creating control flow edges and data flow edges.  RDataTracker keeps track of variable scope and a data node of the same name is not considered a match unless it also has the same scope. Selected values from these tables are written to the DDG directory in the files \textbf{dnodes.txt}, \textbf{pnodes.txt}, and \textbf{returns.txt} whenever \textbf{ddg.save} is called.

\bigskip

In \textbf{ddg.run}, user-defined functions are automatically annotated (unless \textbf{annotate.functions} is set to FALSE) by adding calls to \textbf{ddg.function} and \textbf{ddg.return.value} to the set of parsed commands before the script is executed. A copy of the script annotated in this way is saved to the file \textbf{annotated.script} on the \textbf{ddg} directory.

\subsection{Known Issues}

\textbf{Timestamp in history file}. The timestamp function in RStudio for Windows does not work correctly. A workaround was devised to create our own timestamps in such cases.

\bigskip

\textbf{S3 objects and reference classes}. RDataTracker has not been tested with S3 objects or reference classes.

\section{Acknowledgements}

The authors acknowledge intellectual contributions from collaborators Leon Osterweil (University of Massachusetts Amherst), Aaron Ellison (Harvard University), and Harvard Forest REU students listed below. The work was supported by NSF grants DEB-0620443, DEB-1237491, DBI-1003938, and SSI-1450277, the Charles Bullard Fellowship at Harvard University, and a faculty fellowship from Mount Holyoke College and is a contribution from the Harvard Forest Long-Term Ecological Research (LTER) program. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation, Harvard University, or Mount Holyoke College.

\bigskip

Numerous students have been involved in related research and tool development through the Harvard Forest Summer Research (REU) program, including Shaylyn Adams (2013), Vasco Carinhas (2013), Marios Dardas (2015), Andrew Galdunski (2011), Nicole Hoffler (2014), Antonia Miruna Oprescu (2012), Luis Antonio Perez (2014), Katerina Poulos (2015), Garrett Rosenblatt (2011), Cory Teshera-Sterne (2009), Sofiya Toskova (2010-2011), Morgan Vigil (2010), and Yujia Zhou (2012).


\end{document}
