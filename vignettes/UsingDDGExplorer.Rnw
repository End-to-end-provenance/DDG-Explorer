%\VignetteIndexEntry{UsingDDGExplorer} 

% This file was converted to LaTeX by Writer2LaTeX ver. 1.2
% see http://writer2latex.sourceforge.net for more info

% Conversion and modifications by Luis Perez 17-Jul-2014
\documentclass[12pt]{article}
\usepackage{Sweave}
\usepackage{xcolor}
\usepackage{array}
\usepackage{supertabular}
\usepackage{hyperref}
\hypersetup{colorlinks=true, linkcolor=blue, citecolor=blue, filecolor=blue, urlcolor=blue, pdftitle=}
\usepackage{graphicx}
\usepackage{wrapfig}

% Set up the margins
\usepackage[margin=1in]{geometry}

% Using packages to display R Code
\usepackage{listings}


% Setting up the title
\title{Using DDG Explorer}
\author{
        Barbara Lerner \\
                Department of Computer Science\\
        Mount Holyoke College\\
        50 College St, South Hadley, MA  01075
            \and
        Emery Boose\\
        Harvard Forest\\
        324 North Main Street, Petersham, MA  01366 \\
}
\date{\today}

% Pagestyle
\setlength{\headheight}{15pt}
\usepackage{fancyhdr}
\pagestyle{fancy}

% Page header
\fancyhead{}
\fancyhead[R]{Using DDG Explorer}

% Page footer
\pagenumbering{arabic}

% R Code
\lstset{
language=R,
basicstyle=\scriptsize\ttfamily,
commentstyle=\ttfamily\color{gray},
numbers=left,
numberstyle=\ttfamily\color{gray}\footnotesize,
stepnumber=1,
numbersep=5pt,
backgroundcolor=\color{white},
showspaces=false,
showstringspaces=false,
showtabs=false,
frame=single,
tabsize=2,
captionpos=b,
breaklines=true,
breakatwhitespace=false,
title=\lstname,
escapeinside={},
keywordstyle={},
morekeywords={}
}

\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle

\newpage
\tableofcontents
\newpage
\listoffigures
\newpage

\section{What is the DDG Explorer?}

The DDG Explorer is a tool that allows the user to view and query the Data Derivation Graphs (DDGs) that are created by running programs that collect this data derivation information as they execute. The focus of this document is on its use with DDGs created from execution of R scripts that have been instrumented using calls to the RDataTracker library to collect data provenance. Currently, DDGs can also be created through execution of Little-JIL processes. The DDG notation is general enough to support many languages, but there are currently no other implementations.


DDG Explorer has the following functionality:

\begin{itemize}
\item 
Visualization of DDGs, with the ability to expand or contract portions of the graph to selectively show or hide details
\item 
Ability to view the data or R functions referenced by pieces of the DDG
\item 
Ability to query a DDG to discover how an input data value gets used, or what data and processing steps lead to the derivation of a particular output value
\item 
Ability to compare R scripts used to generate different DDGs
\item 
Ability to search for where a particular data file is used or generated
\end{itemize}

An overview of the project that DDG Explorer was developed in is available \href{http://www.mtholyoke.edu/~blerner/DataProvenance/}{here}

\section{Downloading DDG Explorer}

DDG Explorer can be downloaded from \href{http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf091}{here}.

\subsection{Required software}

\begin{itemize}
\item 
DDG Explorer requires Java 1.7. Most computers come with Java installed, but if you do not have it, you can download it from \href{http://www.oracle.com/technetwork/java/javase/downloads/index.html}{Oracle}. Be sure to select JRE and then the version appropriate for your operating system.
\end{itemize}

\section{Using the DDG Explorer}

After downloading DDGExplorer.jar, you should be able to start it by double-clicking on the icon.

\subsection{Loading a DDG from a file}

When DDG Explorer starts, you should see a window that looks like that in Figure \ref{figure:selector}:

\begin{figure}[!ht]
\begin{center}
\includegraphics{UsingDDGExplorer-img/StartScreen.png} 
\caption{DDG Selector}
\label{figure:selector}
\end{center}
\end{figure}

Across the top of this window, you should see 4 buttons:

\begin{itemize}
\item 
Open from file
\item 
Open from database
\item 
Compare R Scripts
\item 
Find Data Files
\end{itemize}

When you click on Open from File, you will be presented with a standard file browser. Exactly how this file browser looks will depend on the operating system that you are using. Using the file browser, you should navigate to a ddg.txt file, select that and click Open. The ddg.txt file is located in the DDG directory provided as the value of the ddg parameter in the ddg.init or ddg.run call made in the R script.  If no value was provided, the directory is named ``ddg" and is inside the directory that was was the working directory when the script was executed.

The DDG Explorer stores its data in a database (details in the Behind the scenes section below if you are interested). The Open from Database, Compare R Scripts, and Find Data Files buttons only do useful things once there are DDGs in the database. To get data into the database, you must first load it from a file and then save it to the database.

\subsection{The DDG window}

After opening a ddg.txt file, you will see a window that looks like Figure \ref{figure:main}:

\begin{figure}[!ht]
\begin{center}
 \includegraphics{UsingDDGExplorer-img/LoadDDG.png} 
\caption{DDG Explorer Main Window}
 \end{center}
 \label{figure:main}
\end{figure}

Along the top of the window are 3 menus: File, DDG and Help. On the left side is a legend that explains the colors used in the DDG. In the center is a high-level view of the DDG.  On the right is the overview, which is used to scroll through large DDGs.


A DDG is drawn as a number of nodes (the oval shapes) connected with edges (the arrows). The nodes represent either data or processing steps, while the edges show how execution goes from one processing step to the next, or how data is used or produced by a processing step.

Green nodes come in pairs, that can be collapsed into a single node hiding all nodes in between to provide a more abstract view of the DDG.  In this example, the top node is labeled "Loop Start" with the next green node labeled "Loop Finish".  By clicking on either of these nodes a more abstract view of the graph is displayed (Figure \ref{figure:abstract}).

\begin{figure}
\begin{center}
 \includegraphics{UsingDDGExplorer-img/AbstractedNode.png} 
 \caption{Collapsed Abstract Node}
 \label{figure:abstract}
 \end{center}
\end{figure}
 
Notice how the green nodes and everything in between collapses to a single blue node.  By clicking on a blue node, it is replaced with an expanded graph.  Here is the graph with the second blue node expanded (Figure \ref{figure:expanded}).

\begin{figure}
\begin{center}
 \includegraphics{UsingDDGExplorer-img/ExpandedNode.png} 
 \caption{Expanded Abstract Node}
 \label{figure:expanded}
 \end{center}
\end{figure}

A Simple Operation (drawn as a yellow node) represents a processing step that the user cannot zoom in on. It represents the lowest level of processing captured by the DDG.  The plot.data node is such a node and represents the execution of the plot.data function with no details internal to its execution captured in the DDG.

Lilac-colored nodes represent data. In this case, the plot.data function has 3 input parameters:  zz, v and d.  We can tell they are inputs because the arrows point from the data node to the operation node.  The cream-colored nodes represent the bindings of arguments to parameters.  In this case, plot.data is defined as:

\begin{lstlisting}
plot.data <- function(zz, v, d)
\end{lstlisting}

plot.data is called as:

\begin{lstlisting}
plot.data(final.data, input, days)
\end{lstlisting}

The arrows from the data node labeled ``6-input" to the binding node \mbox{``9-v <- input"} to the data node labeled ``9-v" represent the binding that occurs as the value of input is passed to the plot.data function and known by the parameter name v from within plot.data.

Conversely, the edge from the Loop Finish node to the graphic node indicates that "graphic" is an output of the loop.  By right-clicking on a data node, the user can see the value of that variable at that point in execution or the plot created at that point.  For example, right-clicking on "12-graphic" will pop up a window with the corresponding plot (Figure \ref{figure:plot}).

\begin{figure}
\begin{center}
 \includegraphics{UsingDDGExplorer-img/Plot.png} 
\caption{Plot Window}
 \end{center}
 \label{figure:plot}
\end{figure}

There are two additional types of operation nodes: Checkpoint Operation and Restore Operation. 
These correspond to functions provided in DDGCheckpoint.R, a separate file not incorporated into the RDataTracker library.\footnote{The ddg.restore function modifies the user's environment, which is an action that library functions are prohibited from doing.}  A Checkpoint Operation node is created when the user calls the ddg.checkpoint function. It will have an output that is a node representing the RData file that holds the R workspace objects at that point in time. A Restore Operation node is created when the user calls ddg.restore. It will have an input which is the RData file being restored. These node types are not used in this example.

Data nodes are shown in lilac and indicate a data value stored in memory, such as a number or character string. There are three additional data node types: File, URL and Error. A File node signifies that the data are stored in a file, while a URL node indicates that the data came from a website. An Error node (in reddish brown) represents an error during execution of the R script, either run the script or the DDG annotations.

\subsection{Scrolling, magnifying, clicking, right-clicking}


As mentioned above, the user can click on green nodes to collapse them and on blue nodes to expand them. There are some other simple operations that can be done using the mouse.

\begin{flushleft}
\tablefirsthead{}
\tablehead{}
\tabletail{}
\tablelasttail{}
\begin{supertabular}{|m{2.0in}|m{4.3in}|}
\hline
To collapse a section of the graph &
Left click on a green start or finish node.

\\ \hline
To expand a collapsed node &
Left click on a light blue node.

\\ \hline
To move a node &
Drag the node

\\ \hline
To scroll to a different portion of the DDG &
Drag the overview box OR \\
 & Drag on the background

\\ \hline
To re-center the DDG &
Click the Refocus button

\\ \hline
To change the magnification &
Use the slider at the top of the window

\\ \hline
\end{supertabular}
\end{flushleft}

In addition, right-clicking on Windows or control-clicking on a Mac pulls up a context menu depending on the type of node clicked on.
\begin{flushleft}
\tablefirsthead{}
\tablehead{}
\tabletail{}
\tablelasttail{}
\begin{supertabular}{|m{2.0in}|m{4.3in}|}
\hline
On a collapsed node &
The user can expand the current node (same as a click), expand that node to complete detail,  or view the R code that corresponds to this portion of the graph.

\\ \hline

On a start/finish node &
The user can collapse (same as a click), expand to complete detail or see the corresponding R code.
\\ \hline

On a restore node &
The user can collapse (same as a click).

\\ \hline

On an operation node &
The user can see the function definition if the node corresponds to an R function defined within the script.

\\ \hline

On a data, error, file or URL node &
The user can see the data value, error message, file contents or URL contents.

\\ \hline
\end{supertabular}
\end{flushleft}

The Help menu contains a Command Overview command that provides the same information as the table above.


After gaining a little familiarity with DDGs, you may find it convenient to remove the Legend, which you can do by clicking on the X in its upper-right corner. You can display the legend again, if you like, by using the ``Show Legend'' command in the Preferences submenu of the DDG menu.

\subsection{Menu commands}

\subsubsection{File menu}


The File menu contains 6 commands.  Four of these have the same names and behavior as the buttons displayed on the start screen.  The additional commands are:

\begin{itemize}
\item Save to database:  This will save a DDG that was loaded from a file to a database managed by DDG Explorer so that it can be viewed and queried at a later time.

\item Manage database:  This will open a window with more functionality that allows the user to load saved DDGs, query them or delete them.  There are more details in Section \ref{sect:db}.
\end{itemize}

The DDG menu contains the following commands:

\begin{itemize}
\item 
Show attributes: The Show Attributes command displays a window that contains basic metadata about the R script that was executed. The attributes shown are:

\begin{itemize}
\item 
Architecture - this identifies the type of processor that the script was executed on, such as x86\_64.
\item 
Operating System - the operating system that the script was executed on. Note that this will report ``Unix'' when run on a Mac.
\item 
Language - the language that the script was written in. Currently, DDG Explorer supports R and Little-JIL.
\item Language Version - the specific version of the R interpreter that was used
\item 
Script - the full path to the file containing the script
\item 
Script Timestamp - the date and time that the script was last modified
\item 
Working Directory - the directory in which the script was executed
\item 
DDG Directory - the directory in which the ddg was stored
\item 
DDG Timestamp - the time at which the script was executed to create the current DDG.
\item RDataTrackerVersion - the version of the RDataTracker library used to collect the data provenance
\end{itemize}
\item 
Show R script - this will bring up a window that will display the entire R script that was executed
\end{itemize}


\subsubsection{Preferences menu}


The Preferences menu is inside the DDG menu and has two options:

\begin{itemize}
\item 
Draw arrows from inputs to outputs - This option allows the user to control the direction of arrow heads. When drawn from inputs to outputs, arrows are generally downward-pointing and go in the order of execution. When drawn from outputs to inputs, the arrowheads denote what output data were derived from and are generally drawn upward. The default is to draw arrows from input to output.
\item 
Show legend - Initially, the legend is drawn. The user can remove the legend either by clicking the X in the top right of the legend, or by deselecting ``Show legend'' in the preferences menu. If the legend is not showing and the user would like to see it, selecting ``Show legend'' will cause it to reappear.
\end{itemize}
\subsubsection{Help menu}


The help menu contains a single command: Command Overview. This gives a brief description of the commands involving use of the mouse and trackpad to control the display of the DDG.

\section[Using the DDG database]{Using the DDG database}
\label{sect:db}

Initially, DDGs are stored in files. If you run an R script using the same DDG directory as a previous execution, the DDG will be overwritten. To save the DDG permanently and to enable the querying functionality provided by the database, you must save the DDG to the database after loading it into DDG Explorer as a file. You can do this by selecting the ``Save to database'' command in the File menu when a DDG is being displayed. Alternatively, when you close a window displaying a DDG, it will prompt you as to whether you would like to save the DDG to the database. 

When you select the ``Manage database'' command from the File menu, you will see a new window that looks like Figure \ref{fig:manage_databases}

\begin{figure}[!ht]
\begin{center}
 \includegraphics{UsingDDGExplorer-img/ManageDatabase.png} 
 \caption{Load from Database Window}
 \label{fig:manage_databases}
 \end{center}
\end{figure}

\bigskip


The left column lists the names of scripts that have DDGs associated with them in the database. If you select one of these, the window will change to look like Figuere \ref{fig:manage_databases_2}:
\begin{figure}[!ht]
\begin{center}
  \includegraphics{UsingDDGExplorer-img/ManageDatabase2.png}  
  \caption{Select Script Screen}
  \label{fig:manage_databases_2}
  \end{center}
\end{figure}

Now the second column shows the timestamps for all of the DDGs created from that script. In the rightmost column, the ``Delete all'' button is now enabled. If you click this button, it will delete all of the DDGs associated with that script from your database. You will be prompted to confirm that you want to delete them, but once deleted, they cannot be recovered, so be careful!

If you select one execution timestamp, you will now see more buttons enabled (Figure \ref{fig:manage_databases_3}:

\begin{figure}[!ht]
\begin{center}
 \includegraphics{UsingDDGExplorer-img/ManageDatabase3.png} 
 \caption{Select TimeStamp Screen}
 \label{fig:manage_databases_3}
 \end{center}
\end{figure}

Here is what each of these buttons does.

\begin{itemize}
\item 
Delete DDG - This will delete the one DDG that corresponds to the selected script and execution timestamp after confirming that you really want to delete it.
\item 
Open DDG - This will read the entire DDG from the database and create a window displaying the DDG, just as when you read it from a file.
\item 

Show value derivation - This query allows you to view just the portion of a DDG that explains how a particular output value was calculated. After clicking this button, a window will appear asking you to select a variable to display. In Figure \ref{figure:derivation}below, the user asks to see the derivation of the variable ``7-selected.data" and DDG Explorer displays the partial DDG. Here, we can see that get.initial.value initializes the file name to read, the variable to plot, and the start and end dates.  The file name is input to read.data, which reads in the file named ``met-15min.csv" and then returns all.data.  The select.data operation takes all.data, the variable to plot and the start and end dates and returns the selected data. 

\begin{figure}[!ht]
\begin{center}
  \includegraphics{UsingDDGExplorer-img/ShowDerivation.png}
  \caption{Show Derivation}
  \label{figure:derivation}
  \end{center}
\end{figure}

We can get more insight by right-clicking on the data nodes to see what values they have. Here, we see that the 2-variable is airt (meaning air temperature), 3-start.date is 2012-01-01 and 4-end.date is 2012-03-01.  The user could then examine selected.data to see if it, in fact, only contains data with those properties.
\end{itemize}

\begin{itemize}
\item 

Show values computed from: This query allows you to view the portion of the DDG that follows from a particular data value. After clicking this button, you will see a window like the one for the previous query where you can select a data value. This time, however, you will see the values that are computed from this data value as shown in Figure \ref{figure:from} \

Here, we start with 7-selected.data and can see that it is input to two calls to apply.test. One of these calls ends in a call to plot.data, but the resulting plot is not saved.  The second call creates a plot and saved it along with saving the flagged data in a csv file. 

\begin{figure}[!ht]
\begin{center}
\includegraphics{UsingDDGExplorer-img/ComputedFrom.png} 
  \caption{Computed From DDG}
  \label{figure:from}
\end{center}
\end{figure}

\end{itemize}
\newpage

\subsection{Comparing R Scripts}

You will likely find that you change your R script over time. The R scripts are saved in the database along with the DDG, so the DDG Explorer can always show you the R script that corresponds to a particular DDG.

In addition, you may wonder how a script has changed over time, or how the script that generated one DDG differs from the script that generated a different DDG. To help you understand the history of your scripts, the File menu contains the command ``Compare R scripts''. When you select it, you will see the windows in Figure \ref{figure:file_comparison}:

\begin{figure}[!ht]
\begin{center}
 \includegraphics{UsingDDGExplorer-img/UsingDDGExplorer-img010.png} 
 \caption{File Comparison Windows}
 \label{figure:file_comparison}
 \end{center}
\end{figure}

In this window, you can select two R scripts to compare. One will be displayed on the left side of the window. The other will be displayed on the right side of the window. These scripts can either come from the file system or from the database. 


Figure \ref{figure:active_file_comparison} shows what the window will look like after selecting two related but different scripts:

\begin{figure}[!ht]
\begin{center}
\includegraphics{UsingDDGExplorer-img/UsingDDGExplorer-img011.png} 
 \caption{Active File Comparison}
 \label{figure:active_file_comparison}
\end{center}
\end{figure}


The brown color identifies lines that are similar but modified between the two versions. Green identifies lines that have no corresponding lines in the other file. Red identifies places where the comparison tool has inserted blank lines just to help align the files better. Lines with a white background are identical between the two files.

\subsection{Finding where data files are used}

Another useful feature is to allow the user to find where a particular data file has been used as input or produced as output from an R script. To do that, select the ``Find Data Files'' item from the File menu. This will bring up the window in Figure \ref{fig:find_data_files} where you can limit the types of files searched for:

\begin{figure}[!ht]
\begin{center}
 \includegraphics{UsingDDGExplorer-img/FindDataFiles.png} 
 \caption{Find Data Files Dialog}
 \label{fig:find_data_files}
 \end{center}
\end{figure}

Here, you can limit the search to just input files, just output files, or both. You can select one or more file extensions. If you select all, it will include files with any extension, including extensions not appearing in the list. The files are searched for in the database. You can either select for files appearing anywhere in the database or limit the search to a particular script or a particular ddg. After making your selections, the list of matching files will be displayed (Figure \ref{fig:data_list}).

\begin{figure}[!ht]
\begin{center}
 \includegraphics{UsingDDGExplorer-img/FindDataFilesList.png}
 \caption{Find Data Files LIst}
 \label{fig:data_list}
 \end{center}
\end{figure}

The first column identifies the file name. The second column identifies the script that used or created it. The third column shows the execution time of the DDG that references it. The last column shows the name of the node within the DDG. You can sort the list by clicking on the header of the column you want to sort by.  Clicking twice in a row on the same column header reverses the list order.


You can now select one or more files from the list. After selecting files, the buttons work as follows:


\begin{itemize}
\item 
Show Files will display the files themselves, each in a separate window.
\item 
Show DDGs will display the DDGs, scrolling to the position in the DDG where the file is used.
\end{itemize}
\section[Behind the scenes]{Behind the scenes}

This section provides some additional details on the DDG files and database.

\subsection{ddg directories}


All of the information that is collected during execution of your R scripts is saved in a directory. It is important that you know where this directory is in order to find your DDG files and load them into the DDG Explorer.


The directory used is the one passed as the value of the ddgdir parameter to ddg.init or ddg.run, functions from RDataTracker.  If the script that called ddg.init or ddg.run did not pass in a value for this parameter, the DDG can be found in a directory called "ddg" which will be a subdirectory of the working directory when the script ran. This directory will contain a text file named ddg.txt along with files that are created to save input files and large intermediate values, like data frames and plots.

\subsubsection{ddg.txt}


The ddg.txt file contains a textual definition of the DDG, which includes simple values, names of files that contain complex values, and the information required to build nodes and edges.

\subsection{DDG database}


The DDG database is stored in a directory called .ddg in your home directory. For example, on Windows 7, this would be something like C:{\textbackslash}Users{\textbackslash}smith{\textbackslash}.ddg. On the Mac, this would be something like /Users/smith/.ddg. You should not interact with the database through the file system, but only through the DDG Explorer.

\section{Known Issues}
\textbf{Layout Problems:} The DDG layout sometimes does not work well if the top node in the DDG is collapsed.  Try expanding it; the rest of the layout may improve.

Query results sometimes do not layout nicely.  The only solution is to manually move the nodes around.

\textbf{Missing edges: }  If a finish step has a data output, that data output no longer appears when the step is collapsed, even if it is used later in a visible step.  Expanding the node will draw the appropriate nodes and edges.

\section[Acknowledgements]{Acknowledgements}

This material is based upon work supported by the National Science Foundation under Awards No. CCR-0205575, CCR-0427071, and IIS-0705772, the National Science Foundation REU grants DBI-0452254 and DBI-1003938, the Mount Holyoke Center for the Environment Summer Leadership Fellowships, and the Charles Bullard Fellowship in Forest Research at the Harvard Forest and is a contribution from the Harvard Forest Long-Term Ecological Research (LTER) program. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation, Mount Holyoke College or Harvard University.


Numerous students have been involved in the research and tool development through the Harvard Forest Summer Research (REU) program, thesis research at Mount Holyoke and graduate students at the University of Massachusetts Amherst. They are Cory Teshera-Sterne (Mount Holyoke and 2009 REU), Morgan Vigil (2010 REU), Sofiya Taskova (2010 REU, 2011 REU, Mount Holyoke honors thesis), Andy Galdunski (2011 REU), Garrett Rosenblatt (2011 REU), Miruna Oprescu (2012 REU), Yujia Zhou (2012 REU), Shay Addams (2013 REU), Vasco Carinhas (2013 REU), Xiang Zhao (University of Massachusetts, Amherst), Luis Antonio Perez (2014 REU), Nicole Hoffler (2014 REU) .


Lee Osterweil from the University of Massachusetts Amherst, and Aaron Ellison and David Foster from Harvard Forest started this project many years ago through a collaboration between UMass and Harvard Forest.


The DDG Explorer builds on numerous packages that were developed elsewhere:


\begin{itemize}
\item 
Little-JIL, developed at the University of Massachusetts Amherst under the guidance of Lee Osterweil
\item 
Jena, the database technology
\item 
Prefuse, the library used to help draw the DDGs
\item 
jdiff, the library that allows the comparison of R scripts. This is licensed by QArks.com under an LGPL license described at http://www.gnu.org/licenses/lgpl.html.
\end{itemize}

Below is the detailed licensing information that allows us to use and distribute the DDG Explorer software.

\subsection{Jena license}

Unless otherwise noted, the following copyright statement applies:


Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Hewlett-Packard Development Company, LP

Copyright 2010 Talis Systems Ltd.

Copyright 2010 Epimorphics Ltd.


Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:


Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.


Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.


The name of the author may not be used to endorse or promote products derived from this software without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Jena includes software developed by the Apache Software Foundation (\url{http://www.apache.org/}).


Jena includes RDF schemes from DCMI:


Portions of this software may use RDF schemas Copyright (c) 2006 \href{http://dublincore.org/}{\textcolor[rgb]{0.0,0.0,0.6}{DCMI}}, the Dublin Core Metadata Initiative. These are licensed under the \href{http://creativecommons.org/licenses/by/3.0/}{\textcolor[rgb]{0.0,0.0,0.6}{Creative Commons 3.0 Attribution}} license.


Jena is built on top of other sub-systems which we gratefully acknowledge: \href{http://jena.sourceforge.net/Licenses/index.html}{\textcolor[rgb]{0.0,0.0,0.6}{details of these systems and their version numbers}}.


YourKit is kindly supporting open source projects with its full-featured Java Profiler. YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications. Take a look at YourKit's leading software products: \href{http://www.yourkit.com/java/profiler/index.jsp}{\textcolor[rgb]{0.0,0.0,0.6}{YourKit Java Profiler}} and \href{http://www.yourkit.com/.net/profiler/index.jsp}{\textcolor[rgb]{0.0,0.0,0.6}{YourKit .NET Profiler}}.

\subsection{Prefuse license}

Copyright (c) 2004-2006 Regents of the University of California.


All rights reserved.


Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:


\begin{enumerate}
\item 
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
\item 
Redistributions in binary form must reproduce the above copyrightnotice and this list of conditions.
\item 
The name of the University may not be used to endorse or promote products derived from this software without specific prior written permission.
\end{enumerate}

THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


\bigskip
\end{document}
