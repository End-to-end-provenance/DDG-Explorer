
<project
    name="TESTS"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless"
	default="install-and-test"
  >

  <!--############################# Start Setup #############################-->
  <!-- So we can build RDataTracker -->
  <import file="build.xml" />

  <!-- Get the base directory -->
  <dirname 
      property="TESTS.basedir"
      file="${ant.file.TESTS}"
  />

  <!-- For windows, we need to replace \ (backslashes) with / (forwardslashes) -->
  <loadresource property="FILE.basedir"> 
    <propertyresource name="TESTS.basedir"/>
      <filterchain>
        <tokenfilter>
          <filetokenizer/>
          <replacestring from="\" to="/"/>
        </tokenfilter>
      </filterchain>
  </loadresource>
  <!--############################## End Setup ##############################-->

  <!--############################ Start FUNCTIONS ############################-->
  <!-- Check for libraries needed by the tests -->
  <target name="dependencies">
    <exec executable="Rscript" dir="examples/" >
      <arg line="depends.r" />
    </exec>
  </target>

  <!-- Run a specified tests. Parameters needed are :
    @param dir : specified the directory where the test files are contained. This 
                  directory should contain all files required by the test scripts
                  as this is the working directory
    @param out : specified the relative location and name of the output file where
                output from the script should be saved. If sourcing, a file is saved
                in the same location with the prefix "source_" added to the name.
    @param script-file : the name of the script file to be executed, relative to dir
    @param expected_out : the location and name of the expected output for this test.
                          If sourcing, the expected source output is in the same location
                          with the prefix "source_" attached
    @param expected_ddg : the location and name of the expected ddg.txt for this test.
                          If sourcing, the expected source ddg.txt is in the same directory
                          with the prefix "source_" attached
    @param source_test: a boolean which, when true, causes the test file to be sourced
                        using ddg.source(script-file, ignore.ddg.calls=F). This leads to the
                        creation of ddg-source directory, as well to the execution of 
                        diff with the output of the sourcing with the expected output files
                        which should have the "source_" prefix
  -->
  <target name="run-test">
    <!-- Directory to store local files for comparison -->
    <property name="local_dir" value="${dir}/local" />
    <delete dir="${local_dir}" quiet="true" /> 
    <mkdir dir="${local_dir}" />

    <!-- Copy the source test file to this directory, and replace with correct script name and directory -->
  	<copy file="${FILE.basedir}/examples-no-instrumentation/sourceTest.r" todir="${dir}" overwrite="true"/>
  	<replaceregexp  file="${dir}/sourceTest.r"
                    match="\[DIR_LOCAL\]"
                    replace="${FILE.basedir}/${dir}"
                    flags="g"
    />
  	<replaceregexp  file="${dir}/sourceTest.r"
                    match="\[SCRIPT\]"
                    replace="${script-file}"
                    flags="g"
    />
  	<replaceregexp  file="${dir}/sourceTest.r"
  	                    match="\[DIR_DDG\]"
  	                    replace="${FILE.basedir}/${dir}/ddg"
  	                    flags="g"
  	/>

  	<!-- Execute the R Script (delete ddg directory first) -->
    <delete dir="${dir}/ddg" quiet="true" />
  	<exec executable="Rscript" dir="${dir}" output="${FILE.basedir}/${out}" >
      <arg line="sourceTest.r" />
    </exec>

    <!-- Obtain name of expected ddg.txt, expected *.out, and actual *.out -->
    <basename property="ddg_name" file="${expected_ddg}" />
    <basename property="expected_out_name" file="${expected_out}" />
    <basename property="out_name" file="${out}" />

    <!-- Make copy of output files (.out and ddg.txt) as well as expected 
         outputs for diff. Append .local to all files -->
    <copy todir="${local_dir}" overwrite="true">
      <!-- Executed ddg.txt file -->
      <fileset file="${dir}/ddg/ddg.txt" />
      <!-- all .out files and files ending in _ddg.txt in the test directory -->
      <fileset dir="${dir}">
        <include name="*.out" />
        <include name="*_ddg.txt" />
      </fileset>
      <globmapper from="*" to="*.local"/>
    </copy>

    <!-- Delete all timestamp occurrences and local OS/R/Version information -->
    <replaceregexp flags="g"> 
      <regexp pattern='(( Time=)?("?[0-9]{4}-[0-9]{2}-[0-9]{2}(T| )[0-9]{2}(.|:)[0-9]{2}(.|:)[0-9]{2}[A-Z]{0,3}"?))|((Architecture|OperatingSystem|Language|LanguageVersion|RDataTrackerVersion)=(.*)\n)' />
      <substitution expression=""/>
      <fileset dir="${local_dir}">
        <patternset id="local_files">
          <include name="*.local" />
        </patternset>
      </fileset>
    </replaceregexp>

    <!-- Replace local file paths with [DIR] -->
    <replaceregexp flags="g"> 
      <regexp pattern="${FILE.basedir}/${dir}" />
      <substitution expression="\[DIR\]"/>
      <fileset dir="${local_dir}">
        <patternset refid="local_files" />
      </fileset>
    </replaceregexp>

    <!-- Fix line endings on all local files so diff works well -->
    <fixcrlf srcdir="${local_dir}" 
      includes="*.local"
      eol="lf" 
      eof="remove"
      tab="remove" 
      tablength="2"
    />

      <!-- Execute diff on .out files (always)-->
   <echo>
      Diff of (1) ${out_name}.local and (2) ${expected_out_name}.local:
    </echo>
    <exec executable="diff">
      <arg line="--strip-trailing-cr ${local_dir}/${out_name}.local ${local_dir}/${expected_out_name}.local" />
    </exec>

      <!-- Exectute diff on .txt files -->
    <echo>
      Diff of (1) ddg.txt.local and (2) ${ddg_name}.local:
    </echo>
    <exec executable="diff" >
      <arg line="--strip-trailing-cr ${local_dir}/ddg.txt.local ${local_dir}/${ddg_name}.local" />
    </exec>
  </target>
	
	<!-- Runs a test using a standard file naming scheme. -->
	<target name = "run-no-instrumentation-test">
	    <antcall target="run-test">
		    <param name="dir" value="examples-no-instrumentation/${test-name}" />
			<param name="out" value="examples-no-instrumentation/${test-name}/${test-name}.out" />
			<param name="script-file" value="${test-name}.R" />
			<param name="expected_out" value="examples-no-instrumentation/${test-name}/expected_${test-name}.out" />
			<param name="expected_ddg" value="examples-no-instrumentation/${test-name}/expected_${test-name}_ddg.txt" />
	    </antcall>
	</target>
	
	<!-- Updates the expected result files for a test case.  This should only be used when the
		 expected results have changed for the better!  -->
	<target name="update-expected">
	    <!-- Directory to store expected results while editing -->
	    <property name="expected_dir" value="${dir}/expected" />
	    <delete dir="${expected_dir}" quiet="true" /> 
	    <mkdir dir="${expected_dir}" />

	    <!-- Make copy of ddg.txt and the .out file into the expected folder -->
	    <copy todir="${expected_dir}" overwrite="true">
	      <!-- Executed ddg.txt file -->
	      <fileset file="${dir}/ddg/ddg.txt" />
		  <fileset file="${FILE.basedir}/${out}" />
	    </copy>
		
	    <!-- Replace local file paths with [DIR] -->
	    <replaceregexp flags="g"> 
	      <regexp pattern="${FILE.basedir}/${dir}" />
	      <substitution expression="\[DIR\]"/>
	      <fileset dir="${expected_dir}" />
	    </replaceregexp>
		
		<!-- Move the edited files up to become the new expected results -->
	  	<copy file="${expected_dir}/ddg.txt" tofile="${expected_ddg}" overwrite="true" />
	    <basename property="out_name" file="${out}" />
		<copy file="${expected_dir}/${out_name}" tofile="${expected_out}" overwrite="true" />
	</target>
		
	<!-- Task to update the expected results using the standard naming scheme -->
	<target name = "update-no-instrumentation-expected">
	    <antcall target="update-expected">
	      <param name="dir" value="examples-no-instrumentation/${test-name}"/>
	      <param name="out" value="examples-no-instrumentation/${test-name}/${test-name}.out"/>
	      <param name="expected_out" value="examples-no-instrumentation/${test-name}/expected_${test-name}.out"/>
	      <param name="expected_ddg" value="examples-no-instrumentation/${test-name}/expected_${test-name}_ddg.txt"/>
	    </antcall>
	</target>
	
	
	  <!--############################ End FUNCTIONS ############################-->

	
  	<!--########################## Start Basic TESTS ##########################-->
  	<target name="basicTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="basicTest" />
  		</antcall>
  	</target>

	<target name="update-basicTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="basicTest" />
	 	</antcall>
	</target>

  	<target name="S4ObjectTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="S4ObjectTest" />
  		</antcall>
  	</target>

	<target name="update-S4ObjectTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="S4ObjectTest" />
	 	</antcall>
	</target>

  	<target name="ScopeTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="ScopeTest" />
  		</antcall>
  	</target>

	<target name="update-ScopeTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="ScopeTest" />
	 	</antcall>
	</target>

  	<target name="ReturnTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="ReturnTest" />
  		</antcall>
  	</target>

	<target name="update-ReturnTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="ReturnTest" />
	 	</antcall>
	</target>

  	<target name="OddParameterTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="OddParameterTest" />
  		</antcall>
  	</target>

	<target name="update-OddParameterTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="OddParameterTest" />
	 	</antcall>
	</target>

  	<target name="FunctionAnnotationTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="FunctionAnnotationTest" />
  		</antcall>
  	</target>

	<target name="update-FunctionAnnotationTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="FunctionAnnotationTest" />
	 	</antcall>
	</target>

	<target name="normal-tests" depends="basicTest, S4ObjectTest, ScopeTest, ReturnTest, OddParameterTest, FunctionAnnotationTest">
		<echo>##############################################
	      Finished Execution of Normal Tests. Nothing should have malfunctioned.
    	  ##############################################</echo>
  	</target>
	
  <!--########################## End Basic TESTS ##########################-->

  <!--########################## Start Checkpoint TESTS ##########################-->

  	<target name="CheckpointTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="CheckpointTest" />
  		</antcall>
  	</target>

	<target name="update-CheckpointTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="CheckpointTest" />
	 	</antcall>
	</target>

  	<target name="CheckpointFileTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="CheckpointFileTest" />
  		</antcall>
  	</target>

	<target name="update-CheckpointFileTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="CheckpointFileTest" />
	 	</antcall>
	</target>

	<target name="checkpoint-tests" depends="CheckpointTest, CheckpointFileTest">
    	<echo>##############################################
      		Finished Execution of Checkpoint Tests. Expect differences in output for checkpoint-file-test due to directory creation in Windows (using : and spaces).
    		##############################################</echo>
  	</target>

  <!--########################## End Checkpoint TESTS ##########################-->

  <!--########################## Start Source Tests ##########################-->

  	<target name="SourceFuncTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="SourceFuncTest" />
  		</antcall>
  	</target>

	<target name="update-SourceFuncTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="SourceFuncTest" />
	 	</antcall>
	</target>

  	<target name="OnOffTest">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="OnOffTest" />
  		</antcall>
  	</target>

	<target name="update-OnOffTest">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="OnOffTest" />
	 	</antcall>
	</target>

  	<target name="source-tests" depends="SourceFuncTest, OnOffTest">
    	<echo>Finished Execution of Source Tests. A few warnings are raised, but this is expected. You can manually execute the consoleSource.r from the local directory to remove the errors, and then compare to the manual_expected_consoleSource_ddg.txt</echo>
  	</target>

	<!--########################## End Source TESTS ##########################-->

    <!--########################## Start Script Tests ##########################-->
  
  	<target name="CalculateSquareRoot">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="CalculateSquareRoot" />
  		</antcall>
  	    <echo>Differences in the values of the data nodes is normal for the above test. They rely on randomness. The number of nodes created might also differ. Best to check results in visual diff.</echo>
  	</target>

	<target name="update-CalculateSquareRoot">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="CalculateSquareRoot" />
	 	</antcall>
	</target>

  	<target name="DailySolarRadiation">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="DailySolarRadiation" />
  		</antcall>
  	</target>

	<target name="update-DailySolarRadiation">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="DailySolarRadiation" />
	 	</antcall>
	</target>

  	<target name="HFDatasetPreview">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="HFDatasetPreview" />
  		</antcall>
  	</target>

	<target name="update-HFDatasetPreview">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="HFDatasetPreview" />
	 	</antcall>
	</target>

  	<target name="SivanSampling">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="SivanSampling" />
  		</antcall>
	    <echo>This script uses randomization.</echo>
  	</target>

	<target name="update-SivanSampling">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="SivanSampling" />
	 	</antcall>
	</target>

    <target name="script-tests" depends="CalculateSquareRoot, DailySolarRadiation, HFDatasetPreview, SivanSampling">
	    <echo>Script tests for which out put should not differ </echo>
	</target>
	<!--########################## End Script Tests ##########################-->

    <!--########################## Start Interactive Tests ##########################-->
  
  	<target name="RealTime15MinMET">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="RealTime15MinMET" />
  		</antcall>
  	</target>

	<target name="update-RealTime15MinMET">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="RealTime15MinMET" />
	 	</antcall>
	</target>

  	<target name="QualityControl15Min">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="QualityControl15Min" />
  		</antcall>
  	</target>

	<target name="update-QualityControl15Min">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="QualityControl15Min" />
	 	</antcall>
	</target>

    <target name="interactive-tests" depends="RealTime15MinMET, QualityControl15Min">
	    <echo>Script tests for which the user needs to provide input </echo>
	</target>
	
  	<target name="AaronSimesDendrochronology">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="AaronSimesDendrochronology" />
  		</antcall>
  	</target>

	<target name="update-AaronSimesDendrochronology">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="AaronSimesDendrochronology" />
	 	</antcall>
	</target>

	<target name="long-script-tests" depends="AaronSimesDendrochronology" >
	    <echo>Long tests derived from real-world scripts. </echo>
	</target>
	  


  <!--########################## Start Bug Tests ##########################-->

  	<target name="ddgDeepNesting">
  		<antcall target="run-no-instrumentation-test">
  			<param name="test-name" value="ddgDeepNesting" />
  		</antcall>
  	    <echo>This DDG takes over 3 minutes to create.</echo>
  	    <echo>It takes about 3 seconds to run if not building a DDG.</echo>
  	    <echo>It hangs DDG Explorer because of the large n value, StackOverflow inside prefuse code.</echo>
  	</target>

	<target name="update-ddgDeepNesting">
	  	<antcall target="update-no-instrumentation-expected">
	  		<param name="test-name" value="ddgDeepNesting" />
	 	</antcall>
	</target>

  <target name="bug-tests" depends="ddgDeepNesting" >
    <echo>Tests which were added to check for specific bug fixes </echo>
  </target>

  <!--########################## End Bug Tests ##########################-->
  

  <!--################################# MAIN #################################-->
  <target name="quick-test" depends="normal-tests, checkpoint-tests, source-tests, bug-tests" description="Run quick regressions tests for the currently installed RDataTracker Package.">
    <echo>This batch of tests is quick to execute, but not as extensive.</echo>
  </target>

  <target name="long-test" depends="script-tests, long-script-tests" description="Run long regression tests for the currently installed RDataTracker Package.">
    <echo>This batch of tests takes longer, but is a bit more real-world</echo>
  </target>

  <target name="test-all" depends="quick-test, long-test" description="Run all regression tests for the currently installed RDataTracker Package.">
      <echo>All tests makes calls to the RDataTracker Library. You might need to restart RStudio to correctly run the scripts with the updated library installed. Output is saved in tests.log.
	  </echo>
  </target>

  <target name="install-and-test" description="Install the RDataTracker Package and perform all normal regression tests.">
    <splash displaytext="Installing and Testing" />
    <record name="tests.log" action="start" />
      <antcall target="test-all" />
    <record name="tests.log" action="stop" />
  </target>
   <!--################################# END MAIN #################################-->

  <!--################################# UTILIES #################################-->
  <!-- Test interactive() function when calling from command line -->
  <target name="interactive-test">
    <exec executable="Rscript" dir="examples" >
      <arg line="RscriptTest.r" />
    </exec>
  </target>

  <!-- Execute the script timer, which looks in the examples/ directory for all
    files with a (-clear.r) suffix and a (template_)*(-annotated.r) pattern and
    combined matching pairs to create a timing test. It executes a clean version of
    the script, then minimally annotated the clean version and executes a console
    and source version, and finally executes the annotated version. 

    This data is saved in the examples/_timingResults/ directory under the data/time 
    of execution.
  -->
  <target name="script-timer" depends="dependencies">
    <splash displaytext="Running Performance Tests" />
    <!-- Replace base.dir with the base directory of the project -->
    <replaceregexp  file="utilities/scriptTimer.r"
                    match="base.dir &lt;- (.*)"
                    replace='base.dir &lt;- "${FILE.basedir}"'
    />
    <record name="script-timer.log" action="start" />
      <exec executable="Rscript" dir="utilities">
        <arg line="scriptTimer.r execute" /> 
      </exec>
    <record name="script-timer.log" action="stop" />
  </target>

  <!-- Executes the same as above, but logs a lot more information on each 
   script -->
  <target name="script-timer-debug" depends="dependencies">
    <replaceregexp  file="utilities/scriptTimer.r"
                    match="base.dir &lt;- (.*)"
                    replace='base.dir &lt;- "${FILE.basedir}"'
    />
    <record name="script-timer-debug.log" action="start" />
      <exec executable="Rscript" dir="utilities">
        <arg line="scriptTimer.r execute debug" /> 
      </exec>
    <record name="script-timer-debug.log" action="stop" />
  </target>

  <!-- Executes utilities/plot.r. Within this file, scriptTimer.r is executed (making the above
    and unnecessary dependence). 
  -->
  <target name="performance-report" depends="dependencies" description="Execute performance scripts on the current version of the library and generate a report.">
    <splash displaytext="Creating Performance Report."/>
    <!-- Replace base.dir with the base directory of the project -->
    <replaceregexp  file="utilities/plot.r"
                    match="base.dir &lt;- (.*)"
                    replace='base.dir &lt;- "${FILE.basedir}"'
    />
    <record name="plot-performance.log" action="start" />
      <exec executable="Rscript" dir="utilities">
        <arg line="plot.r plot _plots" />
      </exec>
    <record name="plot-performance.log" action="stop" />
  </target>

   <!--################################# END UTILIES #################################-->

</project>
