
<project
    name="TESTS"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless"
	default="install-and-test"
  >

  <!--############################# Start Setup #############################-->
  <!-- So we can build RDataTracker -->
  <import file="build.xml" />

  <!-- Get the base directory -->
  <dirname 
      property="TESTS.basedir"
      file="${ant.file.TESTS}"
  />

  <!-- For windows, we need to replace \ (backslashes) with / (forwardslashes) -->
  <loadresource property="FILE.basedir"> 
    <propertyresource name="TESTS.basedir"/>
      <filterchain>
        <tokenfilter>
          <filetokenizer/>
          <replacestring from="\" to="/"/>
        </tokenfilter>
      </filterchain>
  </loadresource>
  <!--############################## End Setup ##############################-->

  <!--############################ Start FUNCTIONS ############################-->
  <!-- Check for libraries needed by the tests -->
  <target name="dependencies">
    <exec executable="Rscript" dir="examples/" >
      <arg line="depends.r" />
    </exec>
  </target>

  <!-- Run a specified tests. Parameters needed are :
    @param dir : specified the directory where the test files are contained. This 
                  directory should contain all files required by the test scripts
                  as this is the working directory
    @param out : specified the relative location and name of the output file where
                output from the script should be saved. If sourcing, a file is saved
                in the same location with the prefix "source_" added to the name.
    @param script-file : the name of the script file to be executed, relative to dir
    @param expected_out : the location and name of the expected output for this test.
                          If sourcing, the expected source output is in the same location
                          with the prefix "source_" attached
    @param expected_ddg : the location and name of the expected ddg.txt for this test.
                          If sourcing, the expected source ddg.txt is in the same directory
                          with the prefix "source_" attached
    @param source_test: a boolean which, when true, causes the test file to be sourced
                        using ddg.source(script-file, ignore.ddg.calls=F). This leads to the
                        creation of ddg-source directory, as well to the execution of 
                        diff with the output of the sourcing with the expected output files
                        which should have the "source_" prefix
  -->
  <target name="run-test">
    <!-- Checking to see if we also need to run a source test on this script -->
    <condition property="no-source">
      <equals arg1="${source_test}" arg2="false"/>
    </condition>

    <!-- Directory to store local files for comparison -->
    <property name="local_dir" value="${dir}/local" />
    <delete dir="${local_dir}" quiet="true" /> 
    <mkdir dir="${local_dir}" />

    <!-- Copy the script file to this local directory, and replace with ddg directory for execution -->
    <copy file="${dir}/${script-file}" todir="${local_dir}" overwrite="true" />
    <replaceregexp  file="${local_dir}/${script-file}"
                    match="\[DDG-DIR\]"
                    replace="ddg"
                    flags="g"
    />

    <!-- Copy the script file to this local directory, and replace with correct ddg directory for sourcing -->
    <copy file="${dir}/${script-file}" tofile="${local_dir}/source_${script-file}" overwrite="true" unless:true="${no-source}" />
    <replaceregexp  file="${local_dir}/source_${script-file}"
                    match="\[DDG-DIR\]"
                    replace="ddg-source"
                    flags="g"
                    unless:true="${no-source}"
    />

    <!-- Replace working directory with local working directory in both the sourced and the executable test files -->
    <replaceregexp match="\[DIR_DEFAULT\]" replace="${FILE.basedir}/${dir}" flags="g" >
      <fileset dir="${local_dir}" includes="*.r" />
      <fileset dir="${local_dir}" includes="*.R" />
    </replaceregexp>

    <!-- Copy the source test file to this local directory, and replace with correct script name and directory -->
    <copy file="${FILE.basedir}/examples/sourceTest.r" todir="${local_dir}" overwrite="true" unless:true="${no-source}"/>
    <replaceregexp  file="${local_dir}/sourceTest.r"
                    match="\[DIR_LOCAL\]"
                    replace="${FILE.basedir}/${local_dir}"
                    flags="g"
                    unless:true="${no-source}"
    />
    <replaceregexp  file="${local_dir}/sourceTest.r"
                    match="\[SCRIPT\]"
                    replace="source_${script-file}"
                    flags="g"
                    unless:true="${no-source}"
    />

    <!-- Execute the R Script (delete ddg directory first) -->
    <delete dir="${dir}/ddg" quiet="true" />
    <exec executable="Rscript" dir="${local_dir}" output="${FILE.basedir}/${out}" >
      <arg line="${script-file}" />
    </exec>

    <!-- Obtain name of expected ddg.txt, expected *.out, and actual *.out -->
    <basename property="ddg_name" file="${expected_ddg}" />
    <basename property="expected_out_name" file="${expected_out}" />
    <basename property="out_name" file="${out}" />

    <!-- Source the R Script (delete ddg-source directory first)-->
    <delete dir="${dir}/ddg-source" quiet="true" unless:true="${no-source}"/>
    <exec executable="Rscript" dir="${local_dir}" output="${FILE.basedir}/${dir}/source_${out_name}" unless:true="${no-source}">
      <arg line="sourceTest.r" />
    </exec>

    <!-- Make copy of output files (.out and ddg.txt) as well as expected 
         outputs for diff. Append .local to all files -->
    <copy todir="${local_dir}" overwrite="true">
      <!-- Executed ddg.txt file -->
      <fileset file="${dir}/ddg/ddg.txt" />
      <!-- all .out files and files ending in _ddg.txt in the test directory -->
      <fileset dir="${dir}">
        <include name="*.out" />
        <include name="*_ddg.txt" />
      </fileset>
      <globmapper from="*" to="*.local"/>
    </copy>
    <!-- Manual copy of source ddg.txt so it doesn't overwrite executable ddg.txt -->
    <copy file="${dir}/ddg-source/ddg.txt" tofile="${local_dir}/ddg-source.txt.local" overwrite="true" unless:true="${no-source}"/>

    <!-- Delete all timestamp occurrences and local OS/R/Version information -->
    <replaceregexp flags="g"> 
      <regexp pattern='(( Time=)?("?[0-9]{4}-[0-9]{2}-[0-9]{2}(T| )[0-9]{2}(.|:)[0-9]{2}(.|:)[0-9]{2}[A-Z]{0,3}"?))|((Architecture|OperatingSystem|Language|LanguageVersion|RDataTrackerVersion)=(.*)\n)' />
      <substitution expression=""/>
      <fileset dir="${local_dir}">
        <patternset id="local_files">
          <include name="*.local" />
        </patternset>
      </fileset>
    </replaceregexp>

    <!-- Replace local version with correct directories (string to match is [DIR]-->
    <replaceregexp flags="g"> 
      <regexp pattern="\[DIR\]" />
      <substitution expression="${FILE.basedir}/${dir}"/>
      <fileset dir="${local_dir}">
        <patternset refid="local_files" />
      </fileset>
    </replaceregexp>

    <!-- Fix line endings on all local files so diff works well -->
    <fixcrlf srcdir="${local_dir}" 
      includes="*.local"
      eol="lf" 
      eof="remove"
      tab="remove" 
      tablength="2"
    />

      <!-- Execute diff on .out files (always)-->
    <echo>
      Diff of (1) ${out_name}.local and (2) ${expected_out_name}.local:
    </echo>
    <exec executable="diff">
      <arg line="--strip-trailing-cr ${local_dir}/${out_name}.local ${local_dir}/${expected_out_name}.local" />
    </exec>
    <echo unless:true="${no-source}">
      Diff of (1) source_${out_name}.local and (2) source_${expected_out_name}.local:
    </echo>
    <exec executable="diff" unless:true="${no-source}" >
      <arg line="--strip-trailing-cr ${local_dir}/source_${out_name}.local ${local_dir}/source_${expected_out_name}.local" />
    </exec>

      <!-- Exectute diff on .txt files -->
    <echo>
      Diff of (1) ddg.txt.local and (2) ${ddg_name}.local:
    </echo>
    <exec executable="diff" >
      <arg line="--strip-trailing-cr ${local_dir}/ddg.txt.local ${local_dir}/${ddg_name}.local" />
    </exec>
    <echo unless:true="${no-source}">
      Diff of (1) ddg-source.txt.local and (2) source_${ddg_name}.local: 
    </echo>
    <exec executable="diff" unless:true="${no-source}">
      <arg line="--strip-trailing-cr ${local_dir}/ddg-source.txt.local ${local_dir}/source_${ddg_name}.local" />
    </exec>
  </target>
	  <!--############################ End FUNCTIONS ############################-->

  <!--########################## Start Basic TESTS ##########################-->
  <target name="basic-test">
    <antcall target="run-test">
      <param name="dir" value="examples/ddgTest"/>
      <param name="out" value="examples/ddgTest/basicTest.out"/>
      <param name="script-file" value="basicTest.r"/>
      <param name="expected_out" value="examples/ddgTest/expected_basicTest.out"/>
      <param name="expected_ddg" value="examples/ddgTest/expected_basicTest_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="S4-object-test">
    <antcall target="run-test">
      <param name="dir" value="examples/S4ObjectTest"/>
      <param name="out" value="examples/S4ObjectTest/S4ObjectTest.out"/>
      <param name="script-file" value="S4ObjectTest.R"/>
      <param name="expected_out" value="examples/S4ObjectTest/expected_S4ObjectTest.out"/>
      <param name="expected_ddg" value="examples/S4ObjectTest/expected_S4ObjectTest_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="ddg-test">
    <antcall target="run-test">
      <param name="dir" value="examples/ddgTest"/>
      <param name="out" value="examples/ddgTest/ddgTest.out"/>
      <param name="script-file" value="ddgTest.r"/>
      <param name="expected_out" value="examples/ddgTest/expected_ddgTest.out"/>
      <param name="expected_ddg" value="examples/ddgTest/expected_ddgTest_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="normal-tests" depends="basic-test, S4-object-test, ddg-test">
    <echo>##############################################
      Finished Execution of Normal Tests. Nothing should have malfunctioned.
      ##############################################</echo>
  </target>
  <!--########################## End Basic TESTS ##########################-->

  <!--########################## Start Checkpoint TESTS ##########################-->

  <target name="checkpoint-test">
    <antcall target="run-test">
      <param name="dir" value="examples/checkpointTest"/>
      <param name="out" value="examples/checkpointTest/checkpointTest.out"/>
      <param name="script-file" value="CheckpointTest.r"/>
      <param name="expected_out" value="examples/checkpointTest/expected_checkpointTest.out"/>
      <param name="expected_ddg" value="examples/checkpointTest/expected_CheckpointTest_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>
  
  <target name="checkpoint-file-test">
    <antcall target="run-test">
      <param name="dir" value="examples/checkpointTest"/>
      <param name="out" value="examples/checkpointTest/checkpointFileTest.out"/>
      <param name="script-file" value="CheckpointFileTest.r"/>
      <param name="expected_out" value="examples/checkpointTest/expected_checkpointFileTest.out"/>
      <param name="expected_ddg" value="examples/checkpointTest/expected_CheckpointFileTest_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="checkpoint-tests" depends="checkpoint-test, checkpoint-file-test">
    <echo>##############################################
      Finished Execution of Checkpoint Tests. Expect differences in output for checkpoint-file-test due to directory creation in Windows (using : and spaces).
    ##############################################</echo>
  </target>

  <!--########################## End Checkpoint TESTS ##########################-->

  <!--############################ Start Console Tests ############################-->
  <target name="console-test-1">
    <antcall target="run-test">
      <param name="dir" value="examples/consoleTest"/>
      <param name="out" value="examples/consoleTest/consoleTest.out"/>
      <param name="script-file" value="consoleTest.r"/>
      <param name="expected_out" value="examples/consoleTest/expected_consoleTest.out"/>
      <param name="expected_ddg" value="examples/consoleTest/expected_consoleTest_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="console-test-2">
    <antcall target="run-test">
      <param name="dir" value="examples/consoleTest"/>
      <param name="out" value="examples/consoleTest/consoleTest2.out"/>
      <param name="script-file" value="consoleTest2.R"/>
      <param name="expected_out" value="examples/consoleTest/expected_consoleTest2.out"/>
      <param name="expected_ddg" value="examples/consoleTest/expected_consoleTest2_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="MismatchedStartFinishBug-test">
    <antcall target="run-test">
      <param name="dir" value="examples/MismatchedStartFinishBug"/>
      <param name="out" value="examples/MismatchedStartFinishBug/MismatchedStartFinishBug.out"/>
      <param name="script-file" value="MismatchedStartFinishBug.R"/>
      <param name="expected_out" value="examples/MismatchedStartFinishBug/expected_MismatchedStartFinishBug.out"/>
      <param name="expected_ddg" value="examples/MismatchedStartFinishBug/expected_MismatchedStartFinishBug_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="null-na-test">
    <antcall target="run-test">
      <param name="dir" value="examples/NULLandNA"/>
      <param name="out" value="examples/NULLandNA/NULLandNA.out"/>
      <param name="script-file" value="NULLandNA.r"/>
      <param name="expected_out" value="examples/NULLandNA/expected_NULLandNA.out"/>
      <param name="expected_ddg" value="examples/NULLandNA/expected_NULLandNA_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

	  <target name="scope-test">
	    <antcall target="run-test">
	      <param name="dir" value="examples/ScopeTest"/>
	      <param name="out" value="examples/ScopeTest/ScopeTest.out"/>
	      <param name="script-file" value="ScopeTest.R"/>
	      <param name="expected_out" value="examples/ScopeTest/expected_ScopeTest.out"/>
	      <param name="expected_ddg" value="examples/ScopeTest/expected_ScopeTest_ddg.txt"/>
	      <param name="source_test" value="true" />
	    </antcall>
	  </target>

	  <target name="return-test">
	    <antcall target="run-test">
	      <param name="dir" value="examples/ScopeTest"/>
	      <param name="out" value="examples/ScopeTest/ReturnTest.out"/>
	      <param name="script-file" value="ReturnTest.R"/>
	      <param name="expected_out" value="examples/ScopeTest/expected_ReturnTest.out"/>
	      <param name="expected_ddg" value="examples/ScopeTest/expected_ReturnTest_ddg.txt"/>
		  <param name="source_test" value="true" />
	    </antcall>
	  </target>

	  <target name="eval-test">
	    <antcall target="run-test">
	      <param name="dir" value="examples/EvalTest"/>
	      <param name="out" value="examples/EvalTest/EvalTest.out"/>
	      <param name="script-file" value="EvalTest.R"/>
	      <param name="expected_out" value="examples/EvalTest/expected_evalTest.out"/>
	      <param name="expected_ddg" value="examples/EvalTest/expected_evalTest_ddg.txt"/>
	      <param name="source_test" value="false" />
	    </antcall>
	  </target>

	  <target name="eval-source-test">
	    <antcall target="run-test">
	      <param name="dir" value="examples/EvalTest"/>
	      <param name="out" value="examples/EvalTest/EvalTest-Source.out"/>
	      <param name="script-file" value="EvalTest-Source.R"/>
	      <param name="expected_out" value="examples/EvalTest/expected_evalTest-Source.out"/>
	      <param name="expected_ddg" value="examples/EvalTest/expected_evalTest-Source_ddg.txt"/>
	      <param name="source_test" value="true" />
	    </antcall>
	  </target>

	  <target name="eval2-test" depends="dependencies">
	    <antcall target="run-test">
	      <param name="dir" value="examples/EvalTest"/>
	      <param name="out" value="examples/EvalTest/Eval2Test.out"/>
	      <param name="script-file" value="Eval2Test.R"/>
	      <param name="expected_out" value="examples/EvalTest/expected_eval2-test.out"/>
	      <param name="expected_ddg" value="examples/EvalTest/expected_eval2-test_ddg.txt"/>
	      <param name="source_test" value="true" />
	    </antcall>
	  </target>

  <target name="consoleEdgeCases-test">
    <antcall target="run-test">
      <param name="dir" value="examples/consoleEdgeCases"/>
      <param name="out" value="examples/consoleEdgeCases/consoleEdgeCases.out"/>
      <param name="script-file" value="consoleEdgeCases.r"/>
      <param name="expected_out" value="examples/consoleEdgeCases/expected_consoleEdgeCases.out"/>
      <param name="expected_ddg" value="examples/consoleEdgeCases/expected_consoleEdgeCases_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="console-tests" depends="console-test-1, console-test-2, MismatchedStartFinishBug-test, null-na-test, consoleEdgeCases-test, scope-test, return-test, eval-test, eval-source-test, eval2-test">
    <echo>These automated tests are limited when in console mode. You can always manually check the ouput using diff and the provided expected output files for each script. Do note, however, that all of the tests have also been evaluated using ddg.source, which does in fact capture console commands.</echo>
  </target>
  <!--########################## End Console TESTS ##########################-->


  <!--########################## Start Source Tests ##########################-->
  <target name="console-source-1">
    <antcall target="run-test">
      <param name="dir" value="examples/consoleSource"/>
      <param name="out" value="examples/consoleSource/consoleSource.out"/>
      <param name="script-file" value="consoleSource.r"/>
      <param name="expected_out" value="examples/consoleSource/expected_consoleSource.out"/>
      <param name="expected_ddg" value="examples/consoleSource/expected_consoleSource_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="dynamic-console-test-1">
    <antcall target="run-test">
      <param name="dir" value="examples/dynamicConsole"/>
      <param name="out" value="examples/dynamicConsole/dynamicConsole.out"/>
      <param name="script-file" value="dynamicConsole.r"/>
      <param name="expected_out" value="examples/dynamicConsole/expected_dynamicConsole.out"/>
      <param name="expected_ddg" value="examples/dynamicConsole/expected_dynamicConsole_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="source-tests" depends="console-source-1, dynamic-console-test-1">
    <echo>Finished Execution of Source Tests. A few warnings are raised, but this is expected. You can manually execute the consoleSource.r from the local directory to remove the errors, and then compare to the manual_expected_consoleSource_ddg.txt</echo>
  </target>
  <!--########################## End Source TESTS ##########################-->

  <!--########################## Start Script Tests ##########################-->
  
	  <target name="calculate-square-root-3-test">
	    <antcall target="run-test">
	      <param name="dir" value="examples/CalculateSquareRoot"/>
	      <param name="out" value="examples/CalculateSquareRoot/calculate-square-root-3.out"/>
	      <param name="script-file" value="calculate-square-root-3.r"/>
	      <param name="expected_out" value="examples/CalculateSquareRoot/expected_calculate-square-root-3.out"/>
	      <param name="expected_ddg" value="examples/CalculateSquareRoot/expected_calculate-square-root-3_ddg.txt"/>
	      <param name="source_test" value="false" />
	    </antcall>
	  </target>

  <!-- Earlier calculate-square-root tests do not work with scoping code  -->
  <target name="calculate-square-root-tests" depends="calculate-square-root-3-test">
    <echo>Differences in the values of the data nodes is normal for the above tests. They rely on randomness. The number of nodes created might also differ. Best to check results in visual diff.</echo>
  </target>
  
  <target name="daily-solar-radiation-1-test">
    <antcall target="run-test">
      <param name="dir" value="examples/DailySolarRadiation"/>
      <param name="out" value="examples/DailySolarRadiation/daily-solar-radiation-1.out"/>
      <param name="script-file" value="daily-solar-radiation-1.r"/>
      <param name="expected_out" value="examples/DailySolarRadiation/expected_daily-solar-radiation-1.out"/>
      <param name="expected_ddg" value="examples/DailySolarRadiation/expected_daily-solar-radiation-1_ddg.txt"/>
      <param name="source_test" value="false" />
    </antcall>
  </target>
  
  <target name="daily-solar-radiation-2-test">
    <antcall target="run-test">
      <param name="dir" value="examples/DailySolarRadiation"/>
      <param name="out" value="examples/DailySolarRadiation/daily-solar-radiation-2.out"/>
      <param name="script-file" value="daily-solar-radiation-2.r"/>
      <param name="expected_out" value="examples/DailySolarRadiation/expected_daily-solar-radiation-2.out"/>
      <param name="expected_ddg" value="examples/DailySolarRadiation/expected_daily-solar-radiation-2_ddg.txt"/>
      <param name="source_test" value="false" />
    </antcall>
  </target>

  <target name="real-time-15min-met-test" depends="dependencies">
    <antcall target="run-test">
      <param name="dir" value="examples/RealTime15MinMET"/>
      <param name="out" value="examples/RealTime15MinMET/real-time-15min-met-test.out"/>
      <param name="script-file" value="real-time-15min-met-test.r"/>
      <param name="expected_out" value="examples/RealTime15MinMET/expected_real-time-15min-met-test.out"/>
      <param name="expected_ddg" value="examples/RealTime15MinMET/expected_real-time-15min-met-test_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="quality-control-15min-test" depends="dependencies">
    <antcall target="run-test">
      <param name="dir" value="examples/QualityControl15Min"/>
      <param name="out" value="examples/QualityControl15Min/quality-control-15min-test.out"/>
      <param name="script-file" value="quality-control-15min-test.r"/>
      <param name="expected_out" value="examples/QualityControl15Min/expected_quality-control-15min-test.out"/>
      <param name="expected_ddg" value="examples/QualityControl15Min/expected_quality-control-15min-test_ddg.txt"/>
      <param name="source_test" value="true" />
    </antcall>
  </target>

  <target name="daily-solar-radiation-tests" depends="daily-solar-radiation-1-test, daily-solar-radiation-2-test">
    <echo>The daily solar radiation tests should only differ in system information</echo>
  </target>
  <target name="script-tests" depends="calculate-square-root-tests, daily-solar-radiation-tests, real-time-15min-met-test, quality-control-15min-test">
    <echo>Script tests for which out put should not differ </echo>
  </target>
  <!--########################## End Script Tests ##########################-->

  <!--########################## Start Bug Tests ##########################-->
  <target name="ddg-changes-behavior-test">
    <antcall target="run-test">
      <param name="dir" value="examples/ddgChangesBehavior"/>
      <param name="out" value="examples/ddgChangesBehavior/ddgChangesBehavior.out"/>
      <param name="script-file" value="ddgChangesBehavior.r"/>
      <param name="expected_out" value="examples/ddgChangesBehavior/expected_ddgChangesBehavior.out"/>
      <param name="expected_ddg" value="examples/ddgChangesBehavior/expected_ddgChangesBehavior_ddg.txt"/>
      <param name="source_test" value="false" />
    </antcall>
  </target>

  <target name="ddg-hang-test">
    <antcall target="run-test">
      <param name="dir" value="examples/DDGHangBug"/>
      <param name="out" value="examples/DDGHangBug/DDGHangBug.out"/>
      <param name="script-file" value="DDGHangBug.R"/>
      <param name="expected_out" value="examples/DDGHangBug/expected_DDGHangBug.out"/>
      <param name="expected_ddg" value="examples/DDGHangBug/expected_DDGHangBug_ddg.txt"/>
      <param name="source_test" value="false" />
    </antcall>
    <echo>This DDG sometimes hangs DDG Explorer because of the large n value. For testing, we keep a relatively small n. If you change n, the .out file must also be changed.</echo>
  </target>  

  <target name="scoping-error-test">
    <antcall target="run-test">
      <param name="dir" value="examples/scopingTest"/>
      <param name="out" value="examples/scopingTest/scoping_error.out"/>
      <param name="script-file" value="scoping_error.r"/>
      <param name="expected_out" value="examples/scopingTest/expected_scoping_error.out"/>
      <param name="expected_ddg" value="examples/scopingTest/expected_scoping_error_ddg.txt"/>
      <param name="source_test" value="false" />
    </antcall>
    <echo>If this breaks, we have issues with scoping.</echo>
  </target>  

  <target name="simple-test">
    <antcall target="run-test">
      <param name="dir" value="examples/simpleTest"/>
      <param name="out" value="examples/simpleTest/simple.out"/>
      <param name="script-file" value="simple.r"/>
      <param name="expected_out" value="examples/simpleTest/expected_simple.out"/>
      <param name="expected_ddg" value="examples/simpleTest/expected_simple_ddg.txt"/>
      <param name="source_test" value="false" />
    </antcall>
  </target> 

  <target name="bug-tests" depends="ddg-changes-behavior-test, ddg-hang-test,scoping-error-test, simple-test" >
    <echo>Tests which were added to check for specific bug fixes </echo>
  </target>

  <target name="SivanSampling-test">
    <record name="examples/SivanSampling/SivanSampling-test.log" action="start" />
      <antcall target="run-test">
        <param name="dir" value="examples/SivanSampling"/>
        <param name="out" value="examples/SivanSampling/Sampling.out"/>
        <param name="script-file" value="Sampling.R"/>
        <param name="expected_out" value="examples/SivanSampling/expected_Sampling.out"/>
        <param name="expected_ddg" value="examples/SivanSampling/expected_Sampling_ddg.txt"/>

        <param name="source_test" value="false" />
      </antcall>
      <echo>You shuould output this to either a text file, or run the diff manually. The nodes generated are done so through a random process, and therefore differ significantly. Note that the output of this test is saved to examples/SivanSampling/SivanSampling-test.log</echo>
    <record name="SivanSampling-test.log.txt" action="stop" />
  </target> 

  <target name="untested-tests" depends="SivanSampling-test" >
    <echo>Tests which are normally not automatically testsed.</echo>
  </target>

  <!--########################## End Bug Tests ##########################-->
  
  <target name="aaron-annotated-test" depends="dependencies">
    <record name="examples/Aaron/aaron-annotated-test.log" action="start" />
      <antcall target="run-test">
        <param name="dir" value="examples/Aaron"/>
        <param name="out" value="examples/Aaron/aaron-annotated-test.out"/>
        <param name="script-file" value="aaron-annotated-test.r"/>
        <param name="expected_out" value="examples/Aaron/expected_aaron-annotated-test.out"/>
        <param name="expected_ddg" value="examples/Aaron/expected_aaron-annotated-test_ddg.txt"/>

        <param name="source_test" value="false" />
      </antcall>
      <echo message="Please run Aaron's test in the console and compare ddg.txt with expected_ddg.txt" />
    <record name="aaron-annotated-test-test.log.txt" action="stop" />
  </target>

  <target name="aaron-min-test" depends="dependencies">
    <record name="examples/Aaron2/aaron-min-test.log" action="start" />
      <antcall target="run-test">
        <param name="dir" value="examples/Aaron2"/>
        <param name="out" value="examples/Aaron2/aaron-min-test.out"/>
        <param name="script-file" value="aaron-min-test.r"/>
        <param name="expected_out" value="examples/Aaron2/expected_aaron-min-test.out"/>
        <param name="expected_ddg" value="examples/Aaron2/expected_aaron-min-test_ddg.txt"/>
        <param name="source_test" value="true" />
      </antcall>
      <echo message="Please run Aaron's test in the console and compare ddg.txt with expected_ddg.txt" />
    <record name="aaron-min-test-test.log.txt" action="stop" />
  </target>

  <target name="long-script-tests" depends="aaron-annotated-test, aaron-min-test" >
    <echo>Long tests derived from real-world scripts. </echo>
  </target>
  
  <!--################################# MAIN #################################-->
  <target name="quick-test" depends="normal-tests, checkpoint-tests, console-tests, source-tests, bug-tests" description="Run quick regressions tests for the currently installed RDataTracker Package.">
    <echo>This batch of tests is quick to execute, but not as extensive.</echo>
  </target>

  <target name="long-test" depends="script-tests, aaron-min-test, aaron-annotated-test" description="Run long regression tests for the currently installed RDataTracker Package.">
    <echo>This batch of tests takes longer, but is a bit more real-world</echo>
  </target>

  <target name="test-all" depends="quick-test, long-test" description="Run all regression tests for the currently installed RDataTracker Package.">
      <echo>All tests makes calls to the RDataTracker Library. You might need to restart RStudio to correctly run the scripts with the updated library installed. Output is saved in tests.log.

      There is one test which is not run here. The test is SivanSimes dendrochronology master analysis file-test-test. Run it manually, though output is random.</echo>
  </target>

  <target name="install-and-test" description="Install the RDataTracker Package and perform all normal regression tests.">
    <splash displaytext="Installing and Testing" />
    <record name="tests.log" action="start" />
      <antcall target="test-all" />
    <record name="tests.log" action="stop" />
  </target>
   <!--################################# END MAIN #################################-->

  <!--################################# UTILIES #################################-->
  <!-- Test interactive() function when calling from command line -->
  <target name="interactive-test">
    <exec executable="Rscript" dir="examples" >
      <arg line="RscriptTest.r" />
    </exec>
  </target>

  <!-- Execute the script timer, which looks in the examples/ directory for all
    files with a (-clear.r) suffix and a (template_)*(-annotated.r) pattern and
    combined matching pairs to create a timing test. It executes a clean version of
    the script, then minimally annotated the clean version and executes a console
    and source version, and finally executes the annotated version. 

    This data is saved in the examples/_timingResults/ directory under the data/time 
    of execution.
  -->
  <target name="script-timer" depends="dependencies">
    <splash displaytext="Running Performance Tests" />
    <!-- Replace base.dir with the base directory of the project -->
    <replaceregexp  file="utilities/scriptTimer.r"
                    match="base.dir &lt;- (.*)"
                    replace='base.dir &lt;- "${FILE.basedir}"'
    />
    <record name="script-timer.log" action="start" />
      <exec executable="Rscript" dir="utilities">
        <arg line="scriptTimer.r execute" /> 
      </exec>
    <record name="script-timer.log" action="stop" />
  </target>

  <!-- Executes the same as above, but logs a lot more information on each 
   script -->
  <target name="script-timer-debug" depends="dependencies">
    <replaceregexp  file="utilities/scriptTimer.r"
                    match="base.dir &lt;- (.*)"
                    replace='base.dir &lt;- "${FILE.basedir}"'
    />
    <record name="script-timer-debug.log" action="start" />
      <exec executable="Rscript" dir="utilities">
        <arg line="scriptTimer.r execute debug" /> 
      </exec>
    <record name="script-timer-debug.log" action="stop" />
  </target>

  <!-- Executes utilities/plot.r. Within this file, scriptTimer.r is executed (making the above
    and unnecessary dependence). 
  -->
  <target name="performance-report" depends="dependencies" description="Execute performance scripts on the current version of the library and generate a report.">
    <splash displaytext="Creating Performance Report."/>
    <!-- Replace base.dir with the base directory of the project -->
    <replaceregexp  file="utilities/plot.r"
                    match="base.dir &lt;- (.*)"
                    replace='base.dir &lt;- "${FILE.basedir}"'
    />
    <record name="plot-performance.log" action="start" />
      <exec executable="Rscript" dir="utilities">
        <arg line="plot.r plot _plots" />
      </exec>
    <record name="plot-performance.log" action="stop" />
  </target>

   <!--################################# END UTILIES #################################-->

</project>
