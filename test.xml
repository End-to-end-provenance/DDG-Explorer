<project
    name="TESTS"
	xmlns:if="ant:if"
    xmlns:unless="ant:unless">

  <!-- Get the base directory -->
  <dirname 
      property="TESTS.basedir"
      file="${ant.file.TESTS}"
  />

  <!-- For windows, we need to replace \ (backslashes) with / (forwardslashes) -->
  <loadresource property="TESTS.dir"> 
    <propertyresource name="TESTS.basedir"/>
      <filterchain>
        <tokenfilter>
          <filetokenizer/>
          <replacestring from="\" to="/"/>
        </tokenfilter>
      </filterchain>
  </loadresource>

  <!-- Function to run tests on different scripts -->
  <target name="run-test">

    <!-- Directory to store local files for comparison -->
    <property name="local_dir" value="${dir}/local" />
    <delete dir="${local_dir}" quiet="true" /> 
    <mkdir dir="${local_dir}" />

    <!-- Copy the script file to this local directory, and replace with correct work directory -->
    <copy file="${dir}/${script-file}" todir="${local_dir}" />
    <replaceregexp  file="${local_dir}/${script-file}"
                    match="\[DIR_DEFAULT\]"
                    replace="${TESTS.dir}/${dir}"
                    flags="g"
    />

    <!-- Execute the R Script -->
  	<exec executable="Rscript" dir="${local_dir}" output="${TESTS.dir}/${out}" >
  		<arg line="${script-file}" />
  	</exec>

    <!-- Obtain name of expected ddg.txt, expected *.out, and actual *.out -->
    <basename property="ddg_name" file="${expected_ddg}" />
    <basename property="expected_out_name" file="${expected_out}" />
    <basename property="out_name" file="${out}" />

    <!-- Make copy of output files (.out and ddg.txt) as well as expected 
         outputs for diff. Append .local to all files -->
    <copy todir="${local_dir}" overwrite="true">
      <fileset file="${dir}/ddg/ddg.txt" />
      <fileset dir="${dir}">
        <include name="*.out" />
      </fileset>
      <fileset file="${expected_ddg}" />
      <globmapper from="*" to="*.local"/>
    </copy>

    <!-- Delete all timestamp occurrences -->
    <replaceregexp flags="g"> 
      <regexp pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}.[0-9]{2}.[0-9]{2}" />
      <substitution expression=""/>
      <fileset dir="${local_dir}">
        <patternset id="local_files">
          <include name="*.local" />
        </patternset>
      </fileset>
    </replaceregexp>

    <!-- Replace local version with correct directories (string to match is [DIR]-->
    <replaceregexp flags="g"> 
      <regexp pattern="\[DIR\]" />
      <substitution expression="${TESTS.dir}/${dir}"/>
      <fileset dir="${local_dir}">
        <patternset refid="local_files" />
      </fileset>
    </replaceregexp>

    <!-- Condition checking .out files -->
  	<condition property="output-same">
			<filesmatch file1="${local_dir}/${out_name}.local"
            			file2="${local_dir}/${expected_out_name}.local"/>
    </condition>

    <!-- Condition checking whether outputs need to match -->
    <condition property="should-warn">
    	<or>
    		<equals arg1="${fail_out}" arg2="false"/>
    		<isset property="output-same" />
    	</or>
    </condition>

    <!-- Fail unless told not to -->
    <fail message="${script-file} failed with different output"
      unless="should-warn"/>
      <!-- Execute diff on .out files unless output had to be the same -->
    <exec executable="diff" unless:true="${output-same}" >
      <arg line="${local_dir}/${out_name}.local ${local_dir}/${expected_out_name}.local" />
    </exec>

      <!-- Exectute diff on .txt files -->
  	<exec executable="diff" >
  		<arg line="${local_dir}/ddg.txt.local ${local_dir}/${ddg_name}.local" />
  	</exec>
  </target>

  <target name="basic-test">
  	<antcall target="run-test">
  		<param name="dir" value="examples/ddgTest"/>
  		<param name="out" value="examples/ddgTest/basicTest.out"/>
  		<param name="script-file" value="basicTest.r"/>
  		<param name="expected_out" value="examples/ddgTest/expected_basicTest.out"/>
  		<param name="expected_ddg" value="examples/ddgTest/expected_basicTest_ddg.txt"/>
  		<param name="fail_out" value="true" />
  	</antcall>
  </target>

  <target name="S4-object-test">
  	<antcall target="run-test">
  		<param name="dir" value="examples/S4ObjectTest"/>
  		<param name="out" value="examples/S4ObjectTest/S4ObjectTest.out"/>
  		<param name="script-file" value="S4ObjectTest.R"/>
  		<param name="expected_out" value="examples/S4ObjectTest/expected_S4ObjectTest.out"/>
  		<param name="expected_ddg" value="examples/S4ObjectTest/expected_S4ObjectTest_ddg.txt"/>
  		<param name="fail_out" value="false" />
  	</antcall>
  </target>

  <target name="ddg-test">
  	<antcall target="run-test">
  		<param name="dir" value="examples/ddgTest"/>
  		<param name="out" value="examples/ddgTest/ddgTest.out"/>
  		<param name="script-file" value="ddgTest.r"/>
  		<param name="expected_out" value="examples/ddgTest/expected_ddgTest.out"/>
  		<param name="expected_ddg" value="examples/ddgTest/expected_ddg.txt"/>
  		<param name="fail_out" value="true" />
  	</antcall>
  </target>

  <target name="checkpoint-test">
  	<antcall target="run-test">
  		<param name="dir" value="examples/checkpointTest"/>
  		<param name="out" value="examples/checkpointTest/checkpointTest.out"/>
  		<param name="script-file" value="CheckpointTest.r"/>
  		<param name="expected_out" value="examples/checkpointTest/expected_checkpointTest.out"/>
  		<param name="expected_ddg" value="examples/checkpointTest/expected_CheckpointTest_ddg.txt"/>
  		<param name="fail_out" value="false" />
  	</antcall>
  </target>
  
  <target name="checkpoint-file-test">
  	<antcall target="run-test">
  		<param name="dir" value="examples/checkpointTest"/>
  		<param name="out" value="examples/checkpointTest/checkpointFileTest.out"/>
  		<param name="script-file" value="CheckpointFileTest.r"/>
  		<param name="expected_out" value="examples/checkpointTest/expected_checkpointFileTest.out"/>
  		<param name="expected_ddg" value="examples/checkpointTest/expected_CheckpointFileTest_ddg.txt"/>
  		<param name="fail_out" value="false" />
  	</antcall>
  </target>

  <target name="console-test-1">
    <antcall target="run-test">
      <param name="dir" value="examples/consoleTest"/>
      <param name="out" value="examples/consoleTest/consoleTest.out"/>
      <param name="script-file" value="consoleTest.r"/>
      <param name="expected_out" value="examples/consoleTest/expected_consoleTest.out"/>
      <param name="expected_ddg" value="examples/consoleTest/expected_consoleTest_ddg.txt"/>
      <param name="fail_out" value="true" />
    </antcall>
  </target>

  <target name="console-test-2">
    <antcall target="run-test">
      <param name="dir" value="examples/consoleTest"/>
      <param name="out" value="examples/consoleTest/consoleTest2.out"/>
      <param name="script-file" value="consoleTest2.r"/>
      <param name="expected_out" value="examples/consoleTest/expected_consoleTest2.out"/>
      <param name="expected_ddg" value="examples/consoleTest/expected_consoleTest2_ddg.txt"/>
      <param name="fail_out" value="true" />
    </antcall>
  </target>

  <target name="MismatchedStartFinishBug-test">
    <antcall target="run-test">
      <param name="dir" value="examples/MismatchedStartFinishBug"/>
      <param name="out" value="examples/MismatchedStartFinishBug/MismatchedStartFinishBug.out"/>
      <param name="script-file" value="MismatchedStartFinishBug.r"/>
      <param name="expected_out" value="examples/MismatchedStartFinishBug/expected_MismatchedStartFinishBug.out"/>
      <param name="expected_ddg" value="examples/MismatchedStartFinishBug/expected_MismatchedStartFinishBug_ddg.txt"/>
      <param name="fail_out" value="true" />
    </antcall>
  </target>

  <target name="null-na-test">
    <antcall target="run-test">
      <param name="dir" value="examples/NULLandNA"/>
      <param name="out" value="examples/NULLandNA/NULLandNA.out"/>
      <param name="script-file" value="NULLandNA.r"/>
      <param name="expected_out" value="examples/NULLandNA/expected_NULLandNA.out"/>
      <param name="expected_ddg" value="examples/NULLandNA/expected_NULLandNA_ddg.txt"/>
      <param name="fail_out" value="true" />
    </antcall>
    <echo message="Expect the following output when testing manually: [1] .ddg.find.var.uses:  Error analyzing storage.mode(z) - a" />
  </target>

  <target name="console-tests" depends="console-test-1, console-test-2, MismatchedStartFinishBug-test, null-na-test">
    <echo>Remember to manually check the console tests. Automated tests are limited when in console mode.</echo>
  </target>
  
  <target name="calculate-square-root-1-test">
  	<antcall target="run-test">
  		<param name="dir" value="examples/CalculateSquareRoot"/>
  		<param name="out" value="examples/CalculateSquareRoot/calculate-square-root-1.out"/>
  		<param name="script-file" value="calculate-square-root-1.r"/>
  		<param name="expected_out" value="examples/CalculateSquareRoot/expected_calculate-square-root-1.out"/>
  		<param name="expected_ddg" value="examples/CalculateSquareRoot/expected_calculate-square-root-1_ddg.txt"/>
  		<param name="fail_out" value="false" />
  	</antcall>
  </target>
  
  <target name="calculate-square-root-2-test">
  	<antcall target="run-test">
  		<param name="dir" value="examples/CalculateSquareRoot"/>
  		<param name="out" value="examples/CalculateSquareRoot/calculate-square-root-2.out"/>
  		<param name="script-file" value="calculate-square-root-2.r"/>
  		<param name="expected_out" value="examples/CalculateSquareRoot/expected_calculate-square-root-2.out"/>
  		<param name="expected_ddg" value="examples/CalculateSquareRoot/expected_calculate-square-root-2_ddg.txt"/>
  		<param name="fail_out" value="false" />
  	</antcall>
  </target>

  <target name="calculate-square-root-tests" depends="calculate-square-root-1-test, calculate-square-root-2-test">
    <echo>Differences in the values of the data nodes is normal for the above tests. They rely on randomness. The number of nodes created might also differ. Best to check results in visual diff.</echo>
  </target>
  
  <target name="daily-solar-radiation-1-test">
  	<antcall target="run-test">
  		<param name="dir" value="examples/DailySolarRadiation"/>
  		<param name="out" value="examples/DailySolarRadiation/daily-solar-radiation-1.out"/>
  		<param name="script-file" value="daily-solar-radiation-1.r"/>
  		<param name="expected_out" value="examples/DailySolarRadiation/expected_daily-solar-radiation-1.out"/>
  		<param name="expected_ddg" value="examples/DailySolarRadiation/expected_daily-solar-radiation-1_ddg.txt"/>
  		<param name="fail_out" value="true" />
  	</antcall>
  </target>
  
  <target name="daily-solar-radiation-2-test">
  	<antcall target="run-test">
  		<param name="dir" value="examples/DailySolarRadiation"/>
  		<param name="out" value="examples/DailySolarRadiation/daily-solar-radiation-2.out"/>
  		<param name="script-file" value="daily-solar-radiation-2.r"/>
  		<param name="expected_out" value="examples/DailySolarRadiation/expected_daily-solar-radiation-2.out"/>
  		<param name="expected_ddg" value="examples/DailySolarRadiation/expected_daily-solar-radiation-2_ddg.txt"/>
  		<param name="fail_out" value="true" />
  	</antcall>
  </target>

  <target name="daily-solar-radiation-tests" depends="daily-solar-radiation-1-test, daily-solar-radiation-2-test">
    <echo>The daily solar radiation tests should only differ in system information</echo>
  </target>

  <target name="ddg-changes-behavior-test">
    <antcall target="run-test">
      <param name="dir" value="examples/ddgChangesBehavior"/>
      <param name="out" value="examples/ddgChangesBehavior/ddgChangesBehavior.out"/>
      <param name="script-file" value="ddgChangesBehavior.r"/>
      <param name="expected_out" value="examples/ddgChangesBehavior/expected_ddgChangesBehavior.out"/>
      <param name="expected_ddg" value="examples/ddgChangesBehavior/expected_ddgChangesBehavior_ddg.txt"/>
      <param name="fail_out" value="true" />
    </antcall>
  </target>

  <target name="ddg-hang-test">
    <antcall target="run-test">
      <param name="dir" value="examples/DDGHangBug"/>
      <param name="out" value="examples/DDGHangBug/DDGHangBug.out"/>
      <param name="script-file" value="DDGHangBug.r"/>
      <param name="expected_out" value="examples/DDGHangBug/expected_DDGHangBug.out"/>
      <param name="expected_ddg" value="examples/DDGHangBug/expected_DDGHangBug_ddg.txt"/>
      <param name="fail_out" value="true" />
    </antcall>
    <echo>This DDG sometimes hangs DDG Explorer because of the large n value. For testing, we keep a relatively small n. If you change n, the .out file must also be changed.</echo>
  </target>  

  <target name="scoping-error-test">
    <antcall target="run-test">
      <param name="dir" value="examples/scopingTest"/>
      <param name="out" value="examples/scopingTest/scoping_error.out"/>
      <param name="script-file" value="scoping_error.r"/>
      <param name="expected_out" value="examples/scopingTest/expected_scoping_error.out"/>
      <param name="expected_ddg" value="examples/scopingTest/expected_scoping_error_ddg.txt"/>
      <param name="fail_out" value="true" />
    </antcall>
    <echo>If this breaks, we have issues with scoping.</echo>
  </target>  

  <target name="simple-test">
    <antcall target="run-test">
      <param name="dir" value="examples/simpleTest"/>
      <param name="out" value="examples/simpleTest/simple.out"/>
      <param name="script-file" value="simple.r"/>
      <param name="expected_out" value="examples/simpleTest/expected_simple.out"/>
      <param name="expected_ddg" value="examples/simpleTest/expected_simple_ddg.txt"/>
      <param name="fail_out" value="true" />
    </antcall>
  </target> 

  <target name="SivenSampling-test">
    <antcall target="run-test">
      <param name="dir" value="examples/SivanSampling"/>
      <param name="out" value="examples/SivanSampling/Sampling.out"/>
      <param name="script-file" value="Sampling.r"/>
      <param name="expected_out" value="examples/SivanSampling/expected_Sampling.out"/>
      <param name="expected_ddg" value="examples/SivanSampling/expected_Sampling_ddg.txt"/>
      <param name="fail_out" value="false" />
    </antcall>
    <echo>Note that time differences are expected</echo>
  </target> 
  
  <target name="test-all" depends="basic-test, ddg-test, S4-object-test, checkpoint-test, checkpoint-file-test, calculate-square-root-tests, daily-solar-radiation-tests, console-tests, ddg-changes-behavior-test, ddg-hang-test, scoping-error-test, simple-test">
    <echo>All tests makes calls to the RDataTracker Library. You might need to restart RStudio to correctly run the scripts with the updated library installed</echo>
  </target>
	
  <target name="interactive-test">
  	<exec executable="Rscript" dir="examples" >
  		<arg line="RscriptTest.r" />
  	</exec>
  </target>

</project>
